// automatically generated by the FlatBuffers compiler, do not modify

package Common

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type RoomInfo struct {
	_tab flatbuffers.Table
}

func GetRootAsRoomInfo(buf []byte, offset flatbuffers.UOffsetT) *RoomInfo {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &RoomInfo{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *RoomInfo) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *RoomInfo) RoomId() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *RoomInfo) MutateRoomId(n uint64) bool {
	return rcv._tab.MutateUint64Slot(4, n)
}

func (rcv *RoomInfo) GameType() uint16 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetUint16(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *RoomInfo) MutateGameType(n uint16) bool {
	return rcv._tab.MutateUint16Slot(6, n)
}

func (rcv *RoomInfo) Round() byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetByte(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *RoomInfo) MutateRound(n byte) bool {
	return rcv._tab.MutateByteSlot(8, n)
}

func (rcv *RoomInfo) Number() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *RoomInfo) PlayerCount() byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetByte(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *RoomInfo) MutatePlayerCount(n byte) bool {
	return rcv._tab.MutateByteSlot(12, n)
}

func (rcv *RoomInfo) Setting(j int) byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetByte(a + flatbuffers.UOffsetT(j*1))
	}
	return 0
}

func (rcv *RoomInfo) SettingLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *RoomInfo) SettingBytes() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *RoomInfo) RandomRoom() byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetByte(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *RoomInfo) MutateRandomRoom(n byte) bool {
	return rcv._tab.MutateByteSlot(16, n)
}

func RoomInfoStart(builder *flatbuffers.Builder) {
	builder.StartObject(7)
}
func RoomInfoAddRoomId(builder *flatbuffers.Builder, roomId uint64) {
	builder.PrependUint64Slot(0, roomId, 0)
}
func RoomInfoAddGameType(builder *flatbuffers.Builder, gameType uint16) {
	builder.PrependUint16Slot(1, gameType, 0)
}
func RoomInfoAddRound(builder *flatbuffers.Builder, round byte) {
	builder.PrependByteSlot(2, round, 0)
}
func RoomInfoAddNumber(builder *flatbuffers.Builder, number flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(number), 0)
}
func RoomInfoAddPlayerCount(builder *flatbuffers.Builder, playerCount byte) {
	builder.PrependByteSlot(4, playerCount, 0)
}
func RoomInfoAddSetting(builder *flatbuffers.Builder, setting flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(setting), 0)
}
func RoomInfoStartSettingVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(1, numElems, 1)
}
func RoomInfoAddRandomRoom(builder *flatbuffers.Builder, randomRoom byte) {
	builder.PrependByteSlot(6, randomRoom, 0)
}
func RoomInfoEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
