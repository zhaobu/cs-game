// automatically generated by the FlatBuffers compiler, do not modify

package Common

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type LeagueS2LRoundFinishPush struct {
	_tab flatbuffers.Table
}

func GetRootAsLeagueS2LRoundFinishPush(buf []byte, offset flatbuffers.UOffsetT) *LeagueS2LRoundFinishPush {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &LeagueS2LRoundFinishPush{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *LeagueS2LRoundFinishPush) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *LeagueS2LRoundFinishPush) RaceId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *LeagueS2LRoundFinishPush) MutateRaceId(n int64) bool {
	return rcv._tab.MutateInt64Slot(4, n)
}

func (rcv *LeagueS2LRoundFinishPush) RaceRoomId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *LeagueS2LRoundFinishPush) MutateRaceRoomId(n int64) bool {
	return rcv._tab.MutateInt64Slot(6, n)
}

func (rcv *LeagueS2LRoundFinishPush) Scores(j int) int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetInt32(a + flatbuffers.UOffsetT(j*4))
	}
	return 0
}

func (rcv *LeagueS2LRoundFinishPush) ScoresLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func LeagueS2LRoundFinishPushStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func LeagueS2LRoundFinishPushAddRaceId(builder *flatbuffers.Builder, raceId int64) {
	builder.PrependInt64Slot(0, raceId, 0)
}
func LeagueS2LRoundFinishPushAddRaceRoomId(builder *flatbuffers.Builder, raceRoomId int64) {
	builder.PrependInt64Slot(1, raceRoomId, 0)
}
func LeagueS2LRoundFinishPushAddScores(builder *flatbuffers.Builder, scores flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(scores), 0)
}
func LeagueS2LRoundFinishPushStartScoresVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func LeagueS2LRoundFinishPushEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
