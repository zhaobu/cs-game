// automatically generated by the FlatBuffers compiler, do not modify

package Common

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type Room struct {
	_tab flatbuffers.Table
}

func GetRootAsRoom(buf []byte, offset flatbuffers.UOffsetT) *Room {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Room{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *Room) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Room) Status() int8 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt8(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Room) MutateStatus(n int8) bool {
	return rcv._tab.MutateInt8Slot(4, n)
}

func (rcv *Room) CreateTime() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Room) MutateCreateTime(n int64) bool {
	return rcv._tab.MutateInt64Slot(6, n)
}

func (rcv *Room) StartTime() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Room) MutateStartTime(n int64) bool {
	return rcv._tab.MutateInt64Slot(8, n)
}

func (rcv *Room) CurrentRound() byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetByte(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Room) MutateCurrentRound(n byte) bool {
	return rcv._tab.MutateByteSlot(10, n)
}

func (rcv *Room) RoomInfo(obj *RoomInfo) *RoomInfo {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(RoomInfo)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *Room) RoomUsers(obj *RoomUserInfo, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		if obj == nil {
			obj = new(RoomUserInfo)
		}
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *Room) RoomUsersLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func RoomStart(builder *flatbuffers.Builder) {
	builder.StartObject(6)
}
func RoomAddStatus(builder *flatbuffers.Builder, status int8) {
	builder.PrependInt8Slot(0, status, 0)
}
func RoomAddCreateTime(builder *flatbuffers.Builder, createTime int64) {
	builder.PrependInt64Slot(1, createTime, 0)
}
func RoomAddStartTime(builder *flatbuffers.Builder, startTime int64) {
	builder.PrependInt64Slot(2, startTime, 0)
}
func RoomAddCurrentRound(builder *flatbuffers.Builder, currentRound byte) {
	builder.PrependByteSlot(3, currentRound, 0)
}
func RoomAddRoomInfo(builder *flatbuffers.Builder, roomInfo flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(roomInfo), 0)
}
func RoomAddRoomUsers(builder *flatbuffers.Builder, roomUsers flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(roomUsers), 0)
}
func RoomStartRoomUsersVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func RoomEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
