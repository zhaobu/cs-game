// automatically generated by the FlatBuffers compiler, do not modify

package Common

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type CoinRoomRequest struct {
	_tab flatbuffers.Table
}

func GetRootAsCoinRoomRequest(buf []byte, offset flatbuffers.UOffsetT) *CoinRoomRequest {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &CoinRoomRequest{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *CoinRoomRequest) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *CoinRoomRequest) CoinType() byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetByte(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *CoinRoomRequest) MutateCoinType(n byte) bool {
	return rcv._tab.MutateByteSlot(4, n)
}

func (rcv *CoinRoomRequest) GameType() uint16 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetUint16(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *CoinRoomRequest) MutateGameType(n uint16) bool {
	return rcv._tab.MutateUint16Slot(6, n)
}

func (rcv *CoinRoomRequest) LastRoomId() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *CoinRoomRequest) MutateLastRoomId(n uint64) bool {
	return rcv._tab.MutateUint64Slot(8, n)
}

func CoinRoomRequestStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func CoinRoomRequestAddCoinType(builder *flatbuffers.Builder, coinType byte) {
	builder.PrependByteSlot(0, coinType, 0)
}
func CoinRoomRequestAddGameType(builder *flatbuffers.Builder, gameType uint16) {
	builder.PrependUint16Slot(1, gameType, 0)
}
func CoinRoomRequestAddLastRoomId(builder *flatbuffers.Builder, lastRoomId uint64) {
	builder.PrependUint64Slot(2, lastRoomId, 0)
}
func CoinRoomRequestEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
