// automatically generated by the FlatBuffers compiler, do not modify

package Common

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type GameUserDistance struct {
	_tab flatbuffers.Table
}

func GetRootAsGameUserDistance(buf []byte, offset flatbuffers.UOffsetT) *GameUserDistance {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &GameUserDistance{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *GameUserDistance) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *GameUserDistance) MinUserId() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *GameUserDistance) MutateMinUserId(n uint32) bool {
	return rcv._tab.MutateUint32Slot(4, n)
}

func (rcv *GameUserDistance) MaxUserId() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *GameUserDistance) MutateMaxUserId(n uint32) bool {
	return rcv._tab.MutateUint32Slot(6, n)
}

func (rcv *GameUserDistance) Distance() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *GameUserDistance) MutateDistance(n int32) bool {
	return rcv._tab.MutateInt32Slot(8, n)
}

func GameUserDistanceStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func GameUserDistanceAddMinUserId(builder *flatbuffers.Builder, minUserId uint32) {
	builder.PrependUint32Slot(0, minUserId, 0)
}
func GameUserDistanceAddMaxUserId(builder *flatbuffers.Builder, MaxUserId uint32) {
	builder.PrependUint32Slot(1, MaxUserId, 0)
}
func GameUserDistanceAddDistance(builder *flatbuffers.Builder, distance int32) {
	builder.PrependInt32Slot(2, distance, 0)
}
func GameUserDistanceEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
