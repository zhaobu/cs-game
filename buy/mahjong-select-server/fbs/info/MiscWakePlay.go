// automatically generated by the FlatBuffers compiler, do not modify

package info

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type MiscWakePlay struct {
	_tab flatbuffers.Table
}

func GetRootAsMiscWakePlay(buf []byte, offset flatbuffers.UOffsetT) *MiscWakePlay {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &MiscWakePlay{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *MiscWakePlay) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *MiscWakePlay) PlayFlag() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *MiscWakePlay) ShareId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *MiscWakePlay) ShareUserId() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MiscWakePlay) MutateShareUserId(n uint32) bool {
	return rcv._tab.MutateUint32Slot(8, n)
}

func (rcv *MiscWakePlay) Extra1() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *MiscWakePlay) Extra2() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *MiscWakePlay) Extra3() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *MiscWakePlay) Extra4() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *MiscWakePlay) Extra5() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *MiscWakePlay) Extra6() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *MiscWakePlay) Extra7() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *MiscWakePlay) Extra8() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *MiscWakePlay) Extra9() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *MiscWakePlay) Extra10() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func MiscWakePlayStart(builder *flatbuffers.Builder) {
	builder.StartObject(13)
}
func MiscWakePlayAddPlayFlag(builder *flatbuffers.Builder, playFlag flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(playFlag), 0)
}
func MiscWakePlayAddShareId(builder *flatbuffers.Builder, shareId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(shareId), 0)
}
func MiscWakePlayAddShareUserId(builder *flatbuffers.Builder, shareUserId uint32) {
	builder.PrependUint32Slot(2, shareUserId, 0)
}
func MiscWakePlayAddExtra1(builder *flatbuffers.Builder, extra1 flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(extra1), 0)
}
func MiscWakePlayAddExtra2(builder *flatbuffers.Builder, extra2 flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(extra2), 0)
}
func MiscWakePlayAddExtra3(builder *flatbuffers.Builder, extra3 flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(extra3), 0)
}
func MiscWakePlayAddExtra4(builder *flatbuffers.Builder, extra4 flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(extra4), 0)
}
func MiscWakePlayAddExtra5(builder *flatbuffers.Builder, extra5 flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(7, flatbuffers.UOffsetT(extra5), 0)
}
func MiscWakePlayAddExtra6(builder *flatbuffers.Builder, extra6 flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(8, flatbuffers.UOffsetT(extra6), 0)
}
func MiscWakePlayAddExtra7(builder *flatbuffers.Builder, extra7 flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(9, flatbuffers.UOffsetT(extra7), 0)
}
func MiscWakePlayAddExtra8(builder *flatbuffers.Builder, extra8 flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(10, flatbuffers.UOffsetT(extra8), 0)
}
func MiscWakePlayAddExtra9(builder *flatbuffers.Builder, extra9 flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(11, flatbuffers.UOffsetT(extra9), 0)
}
func MiscWakePlayAddExtra10(builder *flatbuffers.Builder, extra10 flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(12, flatbuffers.UOffsetT(extra10), 0)
}
func MiscWakePlayEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
