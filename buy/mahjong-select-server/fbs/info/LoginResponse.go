// automatically generated by the FlatBuffers compiler, do not modify

package info

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type LoginResponse struct {
	_tab flatbuffers.Table
}

func GetRootAsLoginResponse(buf []byte, offset flatbuffers.UOffsetT) *LoginResponse {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &LoginResponse{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *LoginResponse) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *LoginResponse) Result(obj *CommonResult) *CommonResult {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(CommonResult)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *LoginResponse) UserId() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *LoginResponse) MutateUserId(n uint32) bool {
	return rcv._tab.MutateUint32Slot(6, n)
}

func (rcv *LoginResponse) Money() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *LoginResponse) MutateMoney(n int32) bool {
	return rcv._tab.MutateInt32Slot(8, n)
}

func (rcv *LoginResponse) Score() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *LoginResponse) MutateScore(n int32) bool {
	return rcv._tab.MutateInt32Slot(10, n)
}

func (rcv *LoginResponse) Token() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *LoginResponse) RoomId() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *LoginResponse) MutateRoomId(n uint32) bool {
	return rcv._tab.MutateUint32Slot(14, n)
}

func (rcv *LoginResponse) Ip() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *LoginResponse) Port() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *LoginResponse) MutatePort(n int32) bool {
	return rcv._tab.MutateInt32Slot(18, n)
}

func (rcv *LoginResponse) Userinfo(obj *UserInfo) *UserInfo {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(UserInfo)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *LoginResponse) ClubSev(obj *ClubSev) *ClubSev {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(ClubSev)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *LoginResponse) ShareClubUrl() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *LoginResponse) RuleUrl() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *LoginResponse) BindMobile() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *LoginResponse) PushFlag() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *LoginResponse) MutatePushFlag(n uint32) bool {
	return rcv._tab.MutateUint32Slot(30, n)
}

func (rcv *LoginResponse) EditUrl() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func LoginResponseStart(builder *flatbuffers.Builder) {
	builder.StartObject(15)
}
func LoginResponseAddResult(builder *flatbuffers.Builder, result flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(result), 0)
}
func LoginResponseAddUserId(builder *flatbuffers.Builder, userId uint32) {
	builder.PrependUint32Slot(1, userId, 0)
}
func LoginResponseAddMoney(builder *flatbuffers.Builder, money int32) {
	builder.PrependInt32Slot(2, money, 0)
}
func LoginResponseAddScore(builder *flatbuffers.Builder, score int32) {
	builder.PrependInt32Slot(3, score, 0)
}
func LoginResponseAddToken(builder *flatbuffers.Builder, token flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(token), 0)
}
func LoginResponseAddRoomId(builder *flatbuffers.Builder, roomId uint32) {
	builder.PrependUint32Slot(5, roomId, 0)
}
func LoginResponseAddIp(builder *flatbuffers.Builder, ip flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(ip), 0)
}
func LoginResponseAddPort(builder *flatbuffers.Builder, port int32) {
	builder.PrependInt32Slot(7, port, 0)
}
func LoginResponseAddUserinfo(builder *flatbuffers.Builder, userinfo flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(8, flatbuffers.UOffsetT(userinfo), 0)
}
func LoginResponseAddClubSev(builder *flatbuffers.Builder, clubSev flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(9, flatbuffers.UOffsetT(clubSev), 0)
}
func LoginResponseAddShareClubUrl(builder *flatbuffers.Builder, shareClubUrl flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(10, flatbuffers.UOffsetT(shareClubUrl), 0)
}
func LoginResponseAddRuleUrl(builder *flatbuffers.Builder, ruleUrl flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(11, flatbuffers.UOffsetT(ruleUrl), 0)
}
func LoginResponseAddBindMobile(builder *flatbuffers.Builder, bindMobile flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(12, flatbuffers.UOffsetT(bindMobile), 0)
}
func LoginResponseAddPushFlag(builder *flatbuffers.Builder, pushFlag uint32) {
	builder.PrependUint32Slot(13, pushFlag, 0)
}
func LoginResponseAddEditUrl(builder *flatbuffers.Builder, editUrl flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(14, flatbuffers.UOffsetT(editUrl), 0)
}
func LoginResponseEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
