// automatically generated by the FlatBuffers compiler, do not modify

package info

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type RewardCoinResponse struct {
	_tab flatbuffers.Table
}

func GetRootAsRewardCoinResponse(buf []byte, offset flatbuffers.UOffsetT) *RewardCoinResponse {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &RewardCoinResponse{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *RewardCoinResponse) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *RewardCoinResponse) Result(obj *CommonResult) *CommonResult {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(CommonResult)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *RewardCoinResponse) Rewards(obj *CoinReward) *CoinReward {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(CoinReward)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *RewardCoinResponse) CurUser(obj *CurUserInfo) *CurUserInfo {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(CurUserInfo)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func RewardCoinResponseStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func RewardCoinResponseAddResult(builder *flatbuffers.Builder, result flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(result), 0)
}
func RewardCoinResponseAddRewards(builder *flatbuffers.Builder, rewards flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(rewards), 0)
}
func RewardCoinResponseAddCurUser(builder *flatbuffers.Builder, curUser flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(curUser), 0)
}
func RewardCoinResponseEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
