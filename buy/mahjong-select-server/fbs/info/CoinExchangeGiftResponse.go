// automatically generated by the FlatBuffers compiler, do not modify

package info

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type CoinExchangeGiftResponse struct {
	_tab flatbuffers.Table
}

func GetRootAsCoinExchangeGiftResponse(buf []byte, offset flatbuffers.UOffsetT) *CoinExchangeGiftResponse {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &CoinExchangeGiftResponse{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *CoinExchangeGiftResponse) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *CoinExchangeGiftResponse) Result(obj *CommonResult) *CommonResult {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(CommonResult)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *CoinExchangeGiftResponse) UserCoins() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *CoinExchangeGiftResponse) MutateUserCoins(n uint32) bool {
	return rcv._tab.MutateUint32Slot(6, n)
}

func (rcv *CoinExchangeGiftResponse) UserMoneys() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *CoinExchangeGiftResponse) MutateUserMoneys(n uint32) bool {
	return rcv._tab.MutateUint32Slot(8, n)
}

func CoinExchangeGiftResponseStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func CoinExchangeGiftResponseAddResult(builder *flatbuffers.Builder, result flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(result), 0)
}
func CoinExchangeGiftResponseAddUserCoins(builder *flatbuffers.Builder, userCoins uint32) {
	builder.PrependUint32Slot(1, userCoins, 0)
}
func CoinExchangeGiftResponseAddUserMoneys(builder *flatbuffers.Builder, userMoneys uint32) {
	builder.PrependUint32Slot(2, userMoneys, 0)
}
func CoinExchangeGiftResponseEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
