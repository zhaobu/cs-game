// automatically generated by the FlatBuffers compiler, do not modify

package info

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type Match struct {
	_tab flatbuffers.Table
}

func GetRootAsMatch(buf []byte, offset flatbuffers.UOffsetT) *Match {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Match{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *Match) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Match) Id() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Match) MutateId(n int32) bool {
	return rcv._tab.MutateInt32Slot(4, n)
}

func (rcv *Match) Title() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Match) Pic() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Match) Status() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Match) MutateStatus(n int32) bool {
	return rcv._tab.MutateInt32Slot(10, n)
}

func (rcv *Match) StartTime() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Match) MutateStartTime(n int32) bool {
	return rcv._tab.MutateInt32Slot(12, n)
}

func (rcv *Match) EndTime() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Match) MutateEndTime(n int32) bool {
	return rcv._tab.MutateInt32Slot(14, n)
}

func MatchStart(builder *flatbuffers.Builder) {
	builder.StartObject(6)
}
func MatchAddId(builder *flatbuffers.Builder, id int32) {
	builder.PrependInt32Slot(0, id, 0)
}
func MatchAddTitle(builder *flatbuffers.Builder, title flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(title), 0)
}
func MatchAddPic(builder *flatbuffers.Builder, pic flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(pic), 0)
}
func MatchAddStatus(builder *flatbuffers.Builder, status int32) {
	builder.PrependInt32Slot(3, status, 0)
}
func MatchAddStartTime(builder *flatbuffers.Builder, startTime int32) {
	builder.PrependInt32Slot(4, startTime, 0)
}
func MatchAddEndTime(builder *flatbuffers.Builder, endTime int32) {
	builder.PrependInt32Slot(5, endTime, 0)
}
func MatchEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
