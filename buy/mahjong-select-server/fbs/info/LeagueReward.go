// automatically generated by the FlatBuffers compiler, do not modify

package info

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type LeagueReward struct {
	_tab flatbuffers.Table
}

func GetRootAsLeagueReward(buf []byte, offset flatbuffers.UOffsetT) *LeagueReward {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &LeagueReward{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *LeagueReward) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *LeagueReward) Id() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *LeagueReward) MutateId(n int32) bool {
	return rcv._tab.MutateInt32Slot(4, n)
}

func (rcv *LeagueReward) LeagueType() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *LeagueReward) MutateLeagueType(n uint32) bool {
	return rcv._tab.MutateUint32Slot(6, n)
}

func (rcv *LeagueReward) Title() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *LeagueReward) RecordTime() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *LeagueReward) MutateRecordTime(n int32) bool {
	return rcv._tab.MutateInt32Slot(10, n)
}

func (rcv *LeagueReward) LeagueName() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *LeagueReward) Rank() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *LeagueReward) MutateRank(n uint32) bool {
	return rcv._tab.MutateUint32Slot(14, n)
}

func (rcv *LeagueReward) RewardContent() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *LeagueReward) RankStatus() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *LeagueReward) MutateRankStatus(n uint32) bool {
	return rcv._tab.MutateUint32Slot(18, n)
}

func (rcv *LeagueReward) DrawStatus() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *LeagueReward) MutateDrawStatus(n uint32) bool {
	return rcv._tab.MutateUint32Slot(20, n)
}

func LeagueRewardStart(builder *flatbuffers.Builder) {
	builder.StartObject(9)
}
func LeagueRewardAddId(builder *flatbuffers.Builder, id int32) {
	builder.PrependInt32Slot(0, id, 0)
}
func LeagueRewardAddLeagueType(builder *flatbuffers.Builder, leagueType uint32) {
	builder.PrependUint32Slot(1, leagueType, 0)
}
func LeagueRewardAddTitle(builder *flatbuffers.Builder, title flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(title), 0)
}
func LeagueRewardAddRecordTime(builder *flatbuffers.Builder, recordTime int32) {
	builder.PrependInt32Slot(3, recordTime, 0)
}
func LeagueRewardAddLeagueName(builder *flatbuffers.Builder, leagueName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(leagueName), 0)
}
func LeagueRewardAddRank(builder *flatbuffers.Builder, rank uint32) {
	builder.PrependUint32Slot(5, rank, 0)
}
func LeagueRewardAddRewardContent(builder *flatbuffers.Builder, rewardContent flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(rewardContent), 0)
}
func LeagueRewardAddRankStatus(builder *flatbuffers.Builder, rankStatus uint32) {
	builder.PrependUint32Slot(7, rankStatus, 0)
}
func LeagueRewardAddDrawStatus(builder *flatbuffers.Builder, drawStatus uint32) {
	builder.PrependUint32Slot(8, drawStatus, 0)
}
func LeagueRewardEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
