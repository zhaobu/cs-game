// automatically generated by the FlatBuffers compiler, do not modify

package info

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type LoginyybResponse struct {
	_tab flatbuffers.Table
}

func GetRootAsLoginyybResponse(buf []byte, offset flatbuffers.UOffsetT) *LoginyybResponse {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &LoginyybResponse{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *LoginyybResponse) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *LoginyybResponse) Result(obj *CommonResult) *CommonResult {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(CommonResult)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *LoginyybResponse) UserId() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *LoginyybResponse) MutateUserId(n uint32) bool {
	return rcv._tab.MutateUint32Slot(6, n)
}

func (rcv *LoginyybResponse) Money() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *LoginyybResponse) MutateMoney(n int32) bool {
	return rcv._tab.MutateInt32Slot(8, n)
}

func (rcv *LoginyybResponse) Score() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *LoginyybResponse) MutateScore(n int32) bool {
	return rcv._tab.MutateInt32Slot(10, n)
}

func (rcv *LoginyybResponse) Token() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *LoginyybResponse) RoomId() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *LoginyybResponse) MutateRoomId(n uint32) bool {
	return rcv._tab.MutateUint32Slot(14, n)
}

func (rcv *LoginyybResponse) Ip() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *LoginyybResponse) Port() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *LoginyybResponse) MutatePort(n int32) bool {
	return rcv._tab.MutateInt32Slot(18, n)
}

func (rcv *LoginyybResponse) Userinfo(obj *UserInfo) *UserInfo {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(UserInfo)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *LoginyybResponse) ClubSev(obj *ClubSev) *ClubSev {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(ClubSev)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *LoginyybResponse) ShareClubUrl() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *LoginyybResponse) RuleUrl() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func LoginyybResponseStart(builder *flatbuffers.Builder) {
	builder.StartObject(12)
}
func LoginyybResponseAddResult(builder *flatbuffers.Builder, result flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(result), 0)
}
func LoginyybResponseAddUserId(builder *flatbuffers.Builder, userId uint32) {
	builder.PrependUint32Slot(1, userId, 0)
}
func LoginyybResponseAddMoney(builder *flatbuffers.Builder, money int32) {
	builder.PrependInt32Slot(2, money, 0)
}
func LoginyybResponseAddScore(builder *flatbuffers.Builder, score int32) {
	builder.PrependInt32Slot(3, score, 0)
}
func LoginyybResponseAddToken(builder *flatbuffers.Builder, token flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(token), 0)
}
func LoginyybResponseAddRoomId(builder *flatbuffers.Builder, roomId uint32) {
	builder.PrependUint32Slot(5, roomId, 0)
}
func LoginyybResponseAddIp(builder *flatbuffers.Builder, ip flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(ip), 0)
}
func LoginyybResponseAddPort(builder *flatbuffers.Builder, port int32) {
	builder.PrependInt32Slot(7, port, 0)
}
func LoginyybResponseAddUserinfo(builder *flatbuffers.Builder, userinfo flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(8, flatbuffers.UOffsetT(userinfo), 0)
}
func LoginyybResponseAddClubSev(builder *flatbuffers.Builder, clubSev flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(9, flatbuffers.UOffsetT(clubSev), 0)
}
func LoginyybResponseAddShareClubUrl(builder *flatbuffers.Builder, shareClubUrl flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(10, flatbuffers.UOffsetT(shareClubUrl), 0)
}
func LoginyybResponseAddRuleUrl(builder *flatbuffers.Builder, ruleUrl flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(11, flatbuffers.UOffsetT(ruleUrl), 0)
}
func LoginyybResponseEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
