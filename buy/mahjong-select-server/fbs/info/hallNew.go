// automatically generated by the FlatBuffers compiler, do not modify

package info

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type hallNew struct {
	_tab flatbuffers.Table
}

func GetRootAshallNew(buf []byte, offset flatbuffers.UOffsetT) *hallNew {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &hallNew{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *hallNew) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *hallNew) NewActivity() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *hallNew) MutateNewActivity(n int32) bool {
	return rcv._tab.MutateInt32Slot(4, n)
}

func (rcv *hallNew) NewLetter() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *hallNew) MutateNewLetter(n int32) bool {
	return rcv._tab.MutateInt32Slot(6, n)
}

func hallNewStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func hallNewAddNewActivity(builder *flatbuffers.Builder, newActivity int32) {
	builder.PrependInt32Slot(0, newActivity, 0)
}
func hallNewAddNewLetter(builder *flatbuffers.Builder, newLetter int32) {
	builder.PrependInt32Slot(1, newLetter, 0)
}
func hallNewEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
