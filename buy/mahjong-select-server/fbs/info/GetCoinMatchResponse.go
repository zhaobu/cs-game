// automatically generated by the FlatBuffers compiler, do not modify

package info

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type GetCoinMatchResponse struct {
	_tab flatbuffers.Table
}

func GetRootAsGetCoinMatchResponse(buf []byte, offset flatbuffers.UOffsetT) *GetCoinMatchResponse {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &GetCoinMatchResponse{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *GetCoinMatchResponse) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *GetCoinMatchResponse) Result(obj *CommonResult) *CommonResult {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(CommonResult)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *GetCoinMatchResponse) Matches(obj *CoinMatch, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		if obj == nil {
			obj = new(CoinMatch)
		}
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *GetCoinMatchResponse) MatchesLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *GetCoinMatchResponse) Rewards(obj *CoinReward) *CoinReward {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(CoinReward)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *GetCoinMatchResponse) CurUser(obj *CurUserInfo) *CurUserInfo {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(CurUserInfo)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func GetCoinMatchResponseStart(builder *flatbuffers.Builder) {
	builder.StartObject(4)
}
func GetCoinMatchResponseAddResult(builder *flatbuffers.Builder, result flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(result), 0)
}
func GetCoinMatchResponseAddMatches(builder *flatbuffers.Builder, matches flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(matches), 0)
}
func GetCoinMatchResponseStartMatchesVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func GetCoinMatchResponseAddRewards(builder *flatbuffers.Builder, rewards flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(rewards), 0)
}
func GetCoinMatchResponseAddCurUser(builder *flatbuffers.Builder, curUser flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(curUser), 0)
}
func GetCoinMatchResponseEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
