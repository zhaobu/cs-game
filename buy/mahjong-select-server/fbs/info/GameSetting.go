// automatically generated by the FlatBuffers compiler, do not modify

package info

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type GameSetting struct {
	_tab flatbuffers.Table
}

func GetRootAsGameSetting(buf []byte, offset flatbuffers.UOffsetT) *GameSetting {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &GameSetting{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *GameSetting) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *GameSetting) GameType() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *GameSetting) MutateGameType(n int32) bool {
	return rcv._tab.MutateInt32Slot(4, n)
}

func (rcv *GameSetting) Rounds(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *GameSetting) RoundsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *GameSetting) Users() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *GameSetting) Chiken(obj *Setting) *Setting {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(Setting)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *GameSetting) PlayFuc(obj *Setting) *Setting {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(Setting)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *GameSetting) DefautlVal(obj *DefaultValSetting) *DefaultValSetting {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(DefaultValSetting)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *GameSetting) MustVal(obj *MustValSetting) *MustValSetting {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(MustValSetting)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *GameSetting) ChickenMax() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *GameSetting) MutateChickenMax(n int32) bool {
	return rcv._tab.MutateInt32Slot(18, n)
}

func (rcv *GameSetting) MajongNum() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *GameSetting) MutateMajongNum(n int32) bool {
	return rcv._tab.MutateInt32Slot(20, n)
}

func GameSettingStart(builder *flatbuffers.Builder) {
	builder.StartObject(9)
}
func GameSettingAddGameType(builder *flatbuffers.Builder, gameType int32) {
	builder.PrependInt32Slot(0, gameType, 0)
}
func GameSettingAddRounds(builder *flatbuffers.Builder, rounds flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(rounds), 0)
}
func GameSettingStartRoundsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func GameSettingAddUsers(builder *flatbuffers.Builder, users flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(users), 0)
}
func GameSettingAddChiken(builder *flatbuffers.Builder, chiken flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(chiken), 0)
}
func GameSettingAddPlayFuc(builder *flatbuffers.Builder, playFuc flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(playFuc), 0)
}
func GameSettingAddDefautlVal(builder *flatbuffers.Builder, defautlVal flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(defautlVal), 0)
}
func GameSettingAddMustVal(builder *flatbuffers.Builder, mustVal flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(mustVal), 0)
}
func GameSettingAddChickenMax(builder *flatbuffers.Builder, chickenMax int32) {
	builder.PrependInt32Slot(7, chickenMax, 0)
}
func GameSettingAddMajongNum(builder *flatbuffers.Builder, majongNum int32) {
	builder.PrependInt32Slot(8, majongNum, 0)
}
func GameSettingEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
