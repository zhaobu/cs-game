// automatically generated by the FlatBuffers compiler, do not modify

package info

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type ClubDetail struct {
	_tab flatbuffers.Table
}

func GetRootAsClubDetail(buf []byte, offset flatbuffers.UOffsetT) *ClubDetail {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &ClubDetail{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *ClubDetail) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *ClubDetail) Id() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ClubDetail) MutateId(n uint32) bool {
	return rcv._tab.MutateUint32Slot(4, n)
}

func (rcv *ClubDetail) ClubName() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *ClubDetail) ManageUser() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ClubDetail) MutateManageUser(n uint32) bool {
	return rcv._tab.MutateUint32Slot(8, n)
}

func (rcv *ClubDetail) Fund() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ClubDetail) MutateFund(n int32) bool {
	return rcv._tab.MutateInt32Slot(10, n)
}

func (rcv *ClubDetail) ClubIcon() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *ClubDetail) AreaName() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *ClubDetail) UserTotal() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ClubDetail) MutateUserTotal(n uint32) bool {
	return rcv._tab.MutateUint32Slot(16, n)
}

func (rcv *ClubDetail) Status() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ClubDetail) MutateStatus(n uint32) bool {
	return rcv._tab.MutateUint32Slot(18, n)
}

func (rcv *ClubDetail) ClubDescribe() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *ClubDetail) ClubRecord() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ClubDetail) MutateClubRecord(n uint32) bool {
	return rcv._tab.MutateUint32Slot(22, n)
}

func (rcv *ClubDetail) RelationType() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ClubDetail) MutateRelationType(n uint32) bool {
	return rcv._tab.MutateUint32Slot(24, n)
}

func (rcv *ClubDetail) Obsolete() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ClubDetail) MutateObsolete(n uint32) bool {
	return rcv._tab.MutateUint32Slot(26, n)
}

func (rcv *ClubDetail) ObsoleteScore() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ClubDetail) MutateObsoleteScore(n uint32) bool {
	return rcv._tab.MutateUint32Slot(28, n)
}

func (rcv *ClubDetail) UniqueId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *ClubDetail) Notice() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *ClubDetail) UserScore() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(34))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ClubDetail) MutateUserScore(n int32) bool {
	return rcv._tab.MutateInt32Slot(34, n)
}

func ClubDetailStart(builder *flatbuffers.Builder) {
	builder.StartObject(16)
}
func ClubDetailAddId(builder *flatbuffers.Builder, id uint32) {
	builder.PrependUint32Slot(0, id, 0)
}
func ClubDetailAddClubName(builder *flatbuffers.Builder, clubName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(clubName), 0)
}
func ClubDetailAddManageUser(builder *flatbuffers.Builder, manageUser uint32) {
	builder.PrependUint32Slot(2, manageUser, 0)
}
func ClubDetailAddFund(builder *flatbuffers.Builder, fund int32) {
	builder.PrependInt32Slot(3, fund, 0)
}
func ClubDetailAddClubIcon(builder *flatbuffers.Builder, clubIcon flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(clubIcon), 0)
}
func ClubDetailAddAreaName(builder *flatbuffers.Builder, areaName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(areaName), 0)
}
func ClubDetailAddUserTotal(builder *flatbuffers.Builder, userTotal uint32) {
	builder.PrependUint32Slot(6, userTotal, 0)
}
func ClubDetailAddStatus(builder *flatbuffers.Builder, status uint32) {
	builder.PrependUint32Slot(7, status, 0)
}
func ClubDetailAddClubDescribe(builder *flatbuffers.Builder, clubDescribe flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(8, flatbuffers.UOffsetT(clubDescribe), 0)
}
func ClubDetailAddClubRecord(builder *flatbuffers.Builder, clubRecord uint32) {
	builder.PrependUint32Slot(9, clubRecord, 0)
}
func ClubDetailAddRelationType(builder *flatbuffers.Builder, relationType uint32) {
	builder.PrependUint32Slot(10, relationType, 0)
}
func ClubDetailAddObsolete(builder *flatbuffers.Builder, obsolete uint32) {
	builder.PrependUint32Slot(11, obsolete, 0)
}
func ClubDetailAddObsoleteScore(builder *flatbuffers.Builder, obsoleteScore uint32) {
	builder.PrependUint32Slot(12, obsoleteScore, 0)
}
func ClubDetailAddUniqueId(builder *flatbuffers.Builder, uniqueId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(13, flatbuffers.UOffsetT(uniqueId), 0)
}
func ClubDetailAddNotice(builder *flatbuffers.Builder, notice flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(14, flatbuffers.UOffsetT(notice), 0)
}
func ClubDetailAddUserScore(builder *flatbuffers.Builder, userScore int32) {
	builder.PrependInt32Slot(15, userScore, 0)
}
func ClubDetailEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
