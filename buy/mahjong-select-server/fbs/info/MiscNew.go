// automatically generated by the FlatBuffers compiler, do not modify

package info

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type MiscNew struct {
	_tab flatbuffers.Table
}

func GetRootAsMiscNew(buf []byte, offset flatbuffers.UOffsetT) *MiscNew {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &MiscNew{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *MiscNew) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *MiscNew) NewActivity() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MiscNew) MutateNewActivity(n int32) bool {
	return rcv._tab.MutateInt32Slot(4, n)
}

func (rcv *MiscNew) NewLetter() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MiscNew) MutateNewLetter(n int32) bool {
	return rcv._tab.MutateInt32Slot(6, n)
}

func (rcv *MiscNew) Extra1() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *MiscNew) Extra2() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *MiscNew) Extra3() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *MiscNew) Extra4() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *MiscNew) Extra5() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *MiscNew) Extra6() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *MiscNew) Extra7() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *MiscNew) Extra8() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *MiscNew) Extra9() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *MiscNew) Extra10() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func MiscNewStart(builder *flatbuffers.Builder) {
	builder.StartObject(12)
}
func MiscNewAddNewActivity(builder *flatbuffers.Builder, newActivity int32) {
	builder.PrependInt32Slot(0, newActivity, 0)
}
func MiscNewAddNewLetter(builder *flatbuffers.Builder, newLetter int32) {
	builder.PrependInt32Slot(1, newLetter, 0)
}
func MiscNewAddExtra1(builder *flatbuffers.Builder, extra1 flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(extra1), 0)
}
func MiscNewAddExtra2(builder *flatbuffers.Builder, extra2 flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(extra2), 0)
}
func MiscNewAddExtra3(builder *flatbuffers.Builder, extra3 flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(extra3), 0)
}
func MiscNewAddExtra4(builder *flatbuffers.Builder, extra4 flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(extra4), 0)
}
func MiscNewAddExtra5(builder *flatbuffers.Builder, extra5 flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(extra5), 0)
}
func MiscNewAddExtra6(builder *flatbuffers.Builder, extra6 flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(7, flatbuffers.UOffsetT(extra6), 0)
}
func MiscNewAddExtra7(builder *flatbuffers.Builder, extra7 flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(8, flatbuffers.UOffsetT(extra7), 0)
}
func MiscNewAddExtra8(builder *flatbuffers.Builder, extra8 flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(9, flatbuffers.UOffsetT(extra8), 0)
}
func MiscNewAddExtra9(builder *flatbuffers.Builder, extra9 flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(10, flatbuffers.UOffsetT(extra9), 0)
}
func MiscNewAddExtra10(builder *flatbuffers.Builder, extra10 flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(11, flatbuffers.UOffsetT(extra10), 0)
}
func MiscNewEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
