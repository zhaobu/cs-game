// automatically generated by the FlatBuffers compiler, do not modify

package info

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type CoinGift struct {
	_tab flatbuffers.Table
}

func GetRootAsCoinGift(buf []byte, offset flatbuffers.UOffsetT) *CoinGift {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &CoinGift{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *CoinGift) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *CoinGift) Id() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *CoinGift) MutateId(n int32) bool {
	return rcv._tab.MutateInt32Slot(4, n)
}

func (rcv *CoinGift) GiftType() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *CoinGift) MutateGiftType(n uint32) bool {
	return rcv._tab.MutateUint32Slot(6, n)
}

func (rcv *CoinGift) GiftName() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *CoinGift) Diamond() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *CoinGift) MutateDiamond(n uint32) bool {
	return rcv._tab.MutateUint32Slot(10, n)
}

func (rcv *CoinGift) Coins() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *CoinGift) MutateCoins(n uint32) bool {
	return rcv._tab.MutateUint32Slot(12, n)
}

func CoinGiftStart(builder *flatbuffers.Builder) {
	builder.StartObject(5)
}
func CoinGiftAddId(builder *flatbuffers.Builder, id int32) {
	builder.PrependInt32Slot(0, id, 0)
}
func CoinGiftAddGiftType(builder *flatbuffers.Builder, giftType uint32) {
	builder.PrependUint32Slot(1, giftType, 0)
}
func CoinGiftAddGiftName(builder *flatbuffers.Builder, giftName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(giftName), 0)
}
func CoinGiftAddDiamond(builder *flatbuffers.Builder, diamond uint32) {
	builder.PrependUint32Slot(3, diamond, 0)
}
func CoinGiftAddCoins(builder *flatbuffers.Builder, coins uint32) {
	builder.PrependUint32Slot(4, coins, 0)
}
func CoinGiftEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
