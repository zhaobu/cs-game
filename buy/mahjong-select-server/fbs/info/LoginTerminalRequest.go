// automatically generated by the FlatBuffers compiler, do not modify

package info

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type LoginTerminalRequest struct {
	_tab flatbuffers.Table
}

func GetRootAsLoginTerminalRequest(buf []byte, offset flatbuffers.UOffsetT) *LoginTerminalRequest {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &LoginTerminalRequest{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *LoginTerminalRequest) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *LoginTerminalRequest) UserId() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *LoginTerminalRequest) MutateUserId(n uint32) bool {
	return rcv._tab.MutateUint32Slot(4, n)
}

func (rcv *LoginTerminalRequest) Passwd() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *LoginTerminalRequest) DeviceToken() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *LoginTerminalRequest) Openid() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *LoginTerminalRequest) Unionid() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *LoginTerminalRequest) Nickname() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *LoginTerminalRequest) Sex() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *LoginTerminalRequest) Headimgurl() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *LoginTerminalRequest) City() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *LoginTerminalRequest) Version() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func LoginTerminalRequestStart(builder *flatbuffers.Builder) {
	builder.StartObject(10)
}
func LoginTerminalRequestAddUserId(builder *flatbuffers.Builder, userId uint32) {
	builder.PrependUint32Slot(0, userId, 0)
}
func LoginTerminalRequestAddPasswd(builder *flatbuffers.Builder, passwd flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(passwd), 0)
}
func LoginTerminalRequestAddDeviceToken(builder *flatbuffers.Builder, deviceToken flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(deviceToken), 0)
}
func LoginTerminalRequestAddOpenid(builder *flatbuffers.Builder, openid flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(openid), 0)
}
func LoginTerminalRequestAddUnionid(builder *flatbuffers.Builder, unionid flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(unionid), 0)
}
func LoginTerminalRequestAddNickname(builder *flatbuffers.Builder, nickname flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(nickname), 0)
}
func LoginTerminalRequestAddSex(builder *flatbuffers.Builder, sex flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(sex), 0)
}
func LoginTerminalRequestAddHeadimgurl(builder *flatbuffers.Builder, headimgurl flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(7, flatbuffers.UOffsetT(headimgurl), 0)
}
func LoginTerminalRequestAddCity(builder *flatbuffers.Builder, city flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(8, flatbuffers.UOffsetT(city), 0)
}
func LoginTerminalRequestAddVersion(builder *flatbuffers.Builder, version flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(9, flatbuffers.UOffsetT(version), 0)
}
func LoginTerminalRequestEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
