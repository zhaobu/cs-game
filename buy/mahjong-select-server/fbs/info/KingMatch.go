// automatically generated by the FlatBuffers compiler, do not modify

package info

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type KingMatch struct {
	_tab flatbuffers.Table
}

func GetRootAsKingMatch(buf []byte, offset flatbuffers.UOffsetT) *KingMatch {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &KingMatch{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *KingMatch) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *KingMatch) MatchType() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *KingMatch) MutateMatchType(n uint32) bool {
	return rcv._tab.MutateUint32Slot(4, n)
}

func (rcv *KingMatch) GameType() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *KingMatch) MutateGameType(n uint32) bool {
	return rcv._tab.MutateUint32Slot(6, n)
}

func (rcv *KingMatch) ScoreTimes() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *KingMatch) MutateScoreTimes(n uint32) bool {
	return rcv._tab.MutateUint32Slot(8, n)
}

func (rcv *KingMatch) RequireScore() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *KingMatch) MutateRequireScore(n uint32) bool {
	return rcv._tab.MutateUint32Slot(10, n)
}

func (rcv *KingMatch) RequireMoney() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *KingMatch) MutateRequireMoney(n uint32) bool {
	return rcv._tab.MutateUint32Slot(12, n)
}

func KingMatchStart(builder *flatbuffers.Builder) {
	builder.StartObject(5)
}
func KingMatchAddMatchType(builder *flatbuffers.Builder, matchType uint32) {
	builder.PrependUint32Slot(0, matchType, 0)
}
func KingMatchAddGameType(builder *flatbuffers.Builder, gameType uint32) {
	builder.PrependUint32Slot(1, gameType, 0)
}
func KingMatchAddScoreTimes(builder *flatbuffers.Builder, scoreTimes uint32) {
	builder.PrependUint32Slot(2, scoreTimes, 0)
}
func KingMatchAddRequireScore(builder *flatbuffers.Builder, requireScore uint32) {
	builder.PrependUint32Slot(3, requireScore, 0)
}
func KingMatchAddRequireMoney(builder *flatbuffers.Builder, requireMoney uint32) {
	builder.PrependUint32Slot(4, requireMoney, 0)
}
func KingMatchEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
