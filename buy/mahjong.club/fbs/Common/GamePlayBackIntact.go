// automatically generated by the FlatBuffers compiler, do not modify

package Common

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type GamePlayBackIntact struct {
	_tab flatbuffers.Table
}

func GetRootAsGamePlayBackIntact(buf []byte, offset flatbuffers.UOffsetT) *GamePlayBackIntact {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &GamePlayBackIntact{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *GamePlayBackIntact) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *GamePlayBackIntact) RoomInfo(obj *RoomInfo) *RoomInfo {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(RoomInfo)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *GamePlayBackIntact) RoomUserList(obj *RoomUserInfo, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		if obj == nil {
			obj = new(RoomUserInfo)
		}
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *GamePlayBackIntact) RoomUserListLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *GamePlayBackIntact) GameInitList(obj *GameInitPush, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		if obj == nil {
			obj = new(GameInitPush)
		}
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *GamePlayBackIntact) GameInitListLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *GamePlayBackIntact) OperationList(obj *GamePlaybackIntactOperation, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		if obj == nil {
			obj = new(GamePlaybackIntactOperation)
		}
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *GamePlayBackIntact) OperationListLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *GamePlayBackIntact) GameSettlementPush(obj *GameSettlementPush) *GameSettlementPush {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(GameSettlementPush)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *GamePlayBackIntact) MahjongUserInfo(obj *MahjongUserInfo, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		if obj == nil {
			obj = new(MahjongUserInfo)
		}
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *GamePlayBackIntact) MahjongUserInfoLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func GamePlayBackIntactStart(builder *flatbuffers.Builder) {
	builder.StartObject(6)
}
func GamePlayBackIntactAddRoomInfo(builder *flatbuffers.Builder, roomInfo flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(roomInfo), 0)
}
func GamePlayBackIntactAddRoomUserList(builder *flatbuffers.Builder, roomUserList flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(roomUserList), 0)
}
func GamePlayBackIntactStartRoomUserListVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func GamePlayBackIntactAddGameInitList(builder *flatbuffers.Builder, gameInitList flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(gameInitList), 0)
}
func GamePlayBackIntactStartGameInitListVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func GamePlayBackIntactAddOperationList(builder *flatbuffers.Builder, operationList flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(operationList), 0)
}
func GamePlayBackIntactStartOperationListVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func GamePlayBackIntactAddGameSettlementPush(builder *flatbuffers.Builder, gameSettlementPush flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(gameSettlementPush), 0)
}
func GamePlayBackIntactAddMahjongUserInfo(builder *flatbuffers.Builder, mahjongUserInfo flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(mahjongUserInfo), 0)
}
func GamePlayBackIntactStartMahjongUserInfoVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func GamePlayBackIntactEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
