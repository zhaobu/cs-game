// automatically generated by the FlatBuffers compiler, do not modify

package Common

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type RaceUser struct {
	_tab flatbuffers.Table
}

func GetRootAsRaceUser(buf []byte, offset flatbuffers.UOffsetT) *RaceUser {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &RaceUser{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *RaceUser) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *RaceUser) RaceId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *RaceUser) MutateRaceId(n int64) bool {
	return rcv._tab.MutateInt64Slot(4, n)
}

func (rcv *RaceUser) UserId() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *RaceUser) MutateUserId(n int32) bool {
	return rcv._tab.MutateInt32Slot(6, n)
}

func (rcv *RaceUser) Round() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *RaceUser) MutateRound(n int32) bool {
	return rcv._tab.MutateInt32Slot(8, n)
}

func (rcv *RaceUser) Status() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *RaceUser) MutateStatus(n int32) bool {
	return rcv._tab.MutateInt32Slot(10, n)
}

func (rcv *RaceUser) Score() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *RaceUser) MutateScore(n int32) bool {
	return rcv._tab.MutateInt32Slot(12, n)
}

func (rcv *RaceUser) SignupTime() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *RaceUser) MutateSignupTime(n int64) bool {
	return rcv._tab.MutateInt64Slot(14, n)
}

func (rcv *RaceUser) GiveupTime() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *RaceUser) MutateGiveupTime(n int64) bool {
	return rcv._tab.MutateInt64Slot(16, n)
}

func (rcv *RaceUser) FailTime() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *RaceUser) MutateFailTime(n int64) bool {
	return rcv._tab.MutateInt64Slot(18, n)
}

func (rcv *RaceUser) Rank() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *RaceUser) MutateRank(n int32) bool {
	return rcv._tab.MutateInt32Slot(20, n)
}

func RaceUserStart(builder *flatbuffers.Builder) {
	builder.StartObject(9)
}
func RaceUserAddRaceId(builder *flatbuffers.Builder, raceId int64) {
	builder.PrependInt64Slot(0, raceId, 0)
}
func RaceUserAddUserId(builder *flatbuffers.Builder, userId int32) {
	builder.PrependInt32Slot(1, userId, 0)
}
func RaceUserAddRound(builder *flatbuffers.Builder, round int32) {
	builder.PrependInt32Slot(2, round, 0)
}
func RaceUserAddStatus(builder *flatbuffers.Builder, status int32) {
	builder.PrependInt32Slot(3, status, 0)
}
func RaceUserAddScore(builder *flatbuffers.Builder, score int32) {
	builder.PrependInt32Slot(4, score, 0)
}
func RaceUserAddSignupTime(builder *flatbuffers.Builder, signupTime int64) {
	builder.PrependInt64Slot(5, signupTime, 0)
}
func RaceUserAddGiveupTime(builder *flatbuffers.Builder, giveupTime int64) {
	builder.PrependInt64Slot(6, giveupTime, 0)
}
func RaceUserAddFailTime(builder *flatbuffers.Builder, failTime int64) {
	builder.PrependInt64Slot(7, failTime, 0)
}
func RaceUserAddRank(builder *flatbuffers.Builder, rank int32) {
	builder.PrependInt32Slot(8, rank, 0)
}
func RaceUserEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
