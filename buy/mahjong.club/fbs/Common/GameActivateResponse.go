// automatically generated by the FlatBuffers compiler, do not modify

package Common

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type GameActivateResponse struct {
	_tab flatbuffers.Table
}

func GetRootAsGameActivateResponse(buf []byte, offset flatbuffers.UOffsetT) *GameActivateResponse {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &GameActivateResponse{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *GameActivateResponse) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *GameActivateResponse) S2cResult(obj *GameResult) *GameResult {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(GameResult)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *GameActivateResponse) RoomId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *GameActivateResponse) MutateRoomId(n int64) bool {
	return rcv._tab.MutateInt64Slot(6, n)
}

func (rcv *GameActivateResponse) RaceId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *GameActivateResponse) MutateRaceId(n int64) bool {
	return rcv._tab.MutateInt64Slot(8, n)
}

func GameActivateResponseStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func GameActivateResponseAddS2cResult(builder *flatbuffers.Builder, s2cResult flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(s2cResult), 0)
}
func GameActivateResponseAddRoomId(builder *flatbuffers.Builder, roomId int64) {
	builder.PrependInt64Slot(1, roomId, 0)
}
func GameActivateResponseAddRaceId(builder *flatbuffers.Builder, raceId int64) {
	builder.PrependInt64Slot(2, raceId, 0)
}
func GameActivateResponseEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
