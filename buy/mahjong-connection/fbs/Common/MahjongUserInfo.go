// automatically generated by the FlatBuffers compiler, do not modify

package Common

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type MahjongUserInfo struct {
	_tab flatbuffers.Table
}

func GetRootAsMahjongUserInfo(buf []byte, offset flatbuffers.UOffsetT) *MahjongUserInfo {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &MahjongUserInfo{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *MahjongUserInfo) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *MahjongUserInfo) UserId() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MahjongUserInfo) MutateUserId(n uint32) bool {
	return rcv._tab.MutateUint32Slot(4, n)
}

func (rcv *MahjongUserInfo) HandTilesCount() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MahjongUserInfo) MutateHandTilesCount(n int32) bool {
	return rcv._tab.MutateInt32Slot(6, n)
}

func (rcv *MahjongUserInfo) PlayList(j int) byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetByte(a + flatbuffers.UOffsetT(j*1))
	}
	return 0
}

func (rcv *MahjongUserInfo) PlayListLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *MahjongUserInfo) PlayListBytes() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *MahjongUserInfo) ShowCardList(obj *ShowCard, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		if obj == nil {
			obj = new(ShowCard)
		}
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *MahjongUserInfo) ShowCardListLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *MahjongUserInfo) GameScore() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MahjongUserInfo) MutateGameScore(n int32) bool {
	return rcv._tab.MutateInt32Slot(12, n)
}

func (rcv *MahjongUserInfo) LackTile() byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetByte(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MahjongUserInfo) MutateLackTile(n byte) bool {
	return rcv._tab.MutateByteSlot(14, n)
}

func (rcv *MahjongUserInfo) HandTiles(j int) byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetByte(a + flatbuffers.UOffsetT(j*1))
	}
	return 0
}

func (rcv *MahjongUserInfo) HandTilesLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *MahjongUserInfo) HandTilesBytes() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *MahjongUserInfo) BaoTing() byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.GetByte(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MahjongUserInfo) MutateBaoTing(n byte) bool {
	return rcv._tab.MutateByteSlot(18, n)
}

func (rcv *MahjongUserInfo) ChikenChargeBam1() byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.GetByte(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MahjongUserInfo) MutateChikenChargeBam1(n byte) bool {
	return rcv._tab.MutateByteSlot(20, n)
}

func (rcv *MahjongUserInfo) ChikenChargeDot8() byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.GetByte(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MahjongUserInfo) MutateChikenChargeDot8(n byte) bool {
	return rcv._tab.MutateByteSlot(22, n)
}

func (rcv *MahjongUserInfo) ChikenResponsibility() byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.GetByte(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MahjongUserInfo) MutateChikenResponsibility(n byte) bool {
	return rcv._tab.MutateByteSlot(24, n)
}

func MahjongUserInfoStart(builder *flatbuffers.Builder) {
	builder.StartObject(11)
}
func MahjongUserInfoAddUserId(builder *flatbuffers.Builder, userId uint32) {
	builder.PrependUint32Slot(0, userId, 0)
}
func MahjongUserInfoAddHandTilesCount(builder *flatbuffers.Builder, handTilesCount int32) {
	builder.PrependInt32Slot(1, handTilesCount, 0)
}
func MahjongUserInfoAddPlayList(builder *flatbuffers.Builder, playList flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(playList), 0)
}
func MahjongUserInfoStartPlayListVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(1, numElems, 1)
}
func MahjongUserInfoAddShowCardList(builder *flatbuffers.Builder, showCardList flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(showCardList), 0)
}
func MahjongUserInfoStartShowCardListVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func MahjongUserInfoAddGameScore(builder *flatbuffers.Builder, gameScore int32) {
	builder.PrependInt32Slot(4, gameScore, 0)
}
func MahjongUserInfoAddLackTile(builder *flatbuffers.Builder, lackTile byte) {
	builder.PrependByteSlot(5, lackTile, 0)
}
func MahjongUserInfoAddHandTiles(builder *flatbuffers.Builder, handTiles flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(handTiles), 0)
}
func MahjongUserInfoStartHandTilesVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(1, numElems, 1)
}
func MahjongUserInfoAddBaoTing(builder *flatbuffers.Builder, baoTing byte) {
	builder.PrependByteSlot(7, baoTing, 0)
}
func MahjongUserInfoAddChikenChargeBam1(builder *flatbuffers.Builder, chikenChargeBam1 byte) {
	builder.PrependByteSlot(8, chikenChargeBam1, 0)
}
func MahjongUserInfoAddChikenChargeDot8(builder *flatbuffers.Builder, chikenChargeDot8 byte) {
	builder.PrependByteSlot(9, chikenChargeDot8, 0)
}
func MahjongUserInfoAddChikenResponsibility(builder *flatbuffers.Builder, chikenResponsibility byte) {
	builder.PrependByteSlot(10, chikenResponsibility, 0)
}
func MahjongUserInfoEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
