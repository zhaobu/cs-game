// automatically generated by the FlatBuffers compiler, do not modify

package Common

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type LeagueGameRankPush struct {
	_tab flatbuffers.Table
}

func GetRootAsLeagueGameRankPush(buf []byte, offset flatbuffers.UOffsetT) *LeagueGameRankPush {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &LeagueGameRankPush{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *LeagueGameRankPush) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *LeagueGameRankPush) Rank() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *LeagueGameRankPush) MutateRank(n int32) bool {
	return rcv._tab.MutateInt32Slot(4, n)
}

func (rcv *LeagueGameRankPush) Score() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *LeagueGameRankPush) MutateScore(n int32) bool {
	return rcv._tab.MutateInt32Slot(6, n)
}

func (rcv *LeagueGameRankPush) RoomCnt() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *LeagueGameRankPush) MutateRoomCnt(n int32) bool {
	return rcv._tab.MutateInt32Slot(8, n)
}

func LeagueGameRankPushStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func LeagueGameRankPushAddRank(builder *flatbuffers.Builder, rank int32) {
	builder.PrependInt32Slot(0, rank, 0)
}
func LeagueGameRankPushAddScore(builder *flatbuffers.Builder, score int32) {
	builder.PrependInt32Slot(1, score, 0)
}
func LeagueGameRankPushAddRoomCnt(builder *flatbuffers.Builder, roomCnt int32) {
	builder.PrependInt32Slot(2, roomCnt, 0)
}
func LeagueGameRankPushEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
