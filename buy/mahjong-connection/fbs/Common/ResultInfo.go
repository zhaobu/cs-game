// automatically generated by the FlatBuffers compiler, do not modify

package Common

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type ResultInfo struct {
	_tab flatbuffers.Table
}

func GetRootAsResultInfo(buf []byte, offset flatbuffers.UOffsetT) *ResultInfo {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &ResultInfo{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *ResultInfo) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *ResultInfo) UserId() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ResultInfo) MutateUserId(n uint32) bool {
	return rcv._tab.MutateUint32Slot(4, n)
}

func (rcv *ResultInfo) HuTimes() byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetByte(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ResultInfo) MutateHuTimes(n byte) bool {
	return rcv._tab.MutateByteSlot(6, n)
}

func (rcv *ResultInfo) KitchenTimes() byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetByte(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ResultInfo) MutateKitchenTimes(n byte) bool {
	return rcv._tab.MutateByteSlot(8, n)
}

func (rcv *ResultInfo) KongTimes() byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetByte(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ResultInfo) MutateKongTimes(n byte) bool {
	return rcv._tab.MutateByteSlot(10, n)
}

func (rcv *ResultInfo) DianPaoTimes() byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetByte(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ResultInfo) MutateDianPaoTimes(n byte) bool {
	return rcv._tab.MutateByteSlot(12, n)
}

func (rcv *ResultInfo) Score() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ResultInfo) MutateScore(n int32) bool {
	return rcv._tab.MutateInt32Slot(14, n)
}

func (rcv *ResultInfo) TotalScore() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ResultInfo) MutateTotalScore(n int32) bool {
	return rcv._tab.MutateInt32Slot(16, n)
}

func ResultInfoStart(builder *flatbuffers.Builder) {
	builder.StartObject(7)
}
func ResultInfoAddUserId(builder *flatbuffers.Builder, userId uint32) {
	builder.PrependUint32Slot(0, userId, 0)
}
func ResultInfoAddHuTimes(builder *flatbuffers.Builder, huTimes byte) {
	builder.PrependByteSlot(1, huTimes, 0)
}
func ResultInfoAddKitchenTimes(builder *flatbuffers.Builder, KitchenTimes byte) {
	builder.PrependByteSlot(2, KitchenTimes, 0)
}
func ResultInfoAddKongTimes(builder *flatbuffers.Builder, kongTimes byte) {
	builder.PrependByteSlot(3, kongTimes, 0)
}
func ResultInfoAddDianPaoTimes(builder *flatbuffers.Builder, dianPaoTimes byte) {
	builder.PrependByteSlot(4, dianPaoTimes, 0)
}
func ResultInfoAddScore(builder *flatbuffers.Builder, score int32) {
	builder.PrependInt32Slot(5, score, 0)
}
func ResultInfoAddTotalScore(builder *flatbuffers.Builder, totalScore int32) {
	builder.PrependInt32Slot(6, totalScore, 0)
}
func ResultInfoEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
