// automatically generated by the FlatBuffers compiler, do not modify

package Common

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type ClubClubMessageNotify struct {
	_tab flatbuffers.Table
}

func GetRootAsClubClubMessageNotify(buf []byte, offset flatbuffers.UOffsetT) *ClubClubMessageNotify {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &ClubClubMessageNotify{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *ClubClubMessageNotify) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *ClubClubMessageNotify) ClubId() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ClubClubMessageNotify) MutateClubId(n int32) bool {
	return rcv._tab.MutateInt32Slot(4, n)
}

func (rcv *ClubClubMessageNotify) MType() byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetByte(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ClubClubMessageNotify) MutateMType(n byte) bool {
	return rcv._tab.MutateByteSlot(6, n)
}

func (rcv *ClubClubMessageNotify) Content() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func ClubClubMessageNotifyStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func ClubClubMessageNotifyAddClubId(builder *flatbuffers.Builder, clubId int32) {
	builder.PrependInt32Slot(0, clubId, 0)
}
func ClubClubMessageNotifyAddMType(builder *flatbuffers.Builder, mType byte) {
	builder.PrependByteSlot(1, mType, 0)
}
func ClubClubMessageNotifyAddContent(builder *flatbuffers.Builder, content flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(content), 0)
}
func ClubClubMessageNotifyEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
