// automatically generated by the FlatBuffers compiler, do not modify

package Common

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type Race struct {
	_tab flatbuffers.Table
}

func GetRootAsRace(buf []byte, offset flatbuffers.UOffsetT) *Race {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Race{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *Race) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Race) RaceId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Race) MutateRaceId(n int64) bool {
	return rcv._tab.MutateInt64Slot(4, n)
}

func (rcv *Race) LeagueId() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Race) MutateLeagueId(n int32) bool {
	return rcv._tab.MutateInt32Slot(6, n)
}

func (rcv *Race) Name() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Race) Icon() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Race) MutateIcon(n int32) bool {
	return rcv._tab.MutateInt32Slot(10, n)
}

func (rcv *Race) GameType() uint16 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetUint16(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Race) MutateGameType(n uint16) bool {
	return rcv._tab.MutateUint16Slot(12, n)
}

func (rcv *Race) Setting(j int) byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetByte(a + flatbuffers.UOffsetT(j*1))
	}
	return 0
}

func (rcv *Race) SettingLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *Race) SettingBytes() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Race) Rounds() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Race) RequireUserCount() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Race) MutateRequireUserCount(n int32) bool {
	return rcv._tab.MutateInt32Slot(18, n)
}

func (rcv *Race) SignupUserCount() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Race) MutateSignupUserCount(n int32) bool {
	return rcv._tab.MutateInt32Slot(20, n)
}

func (rcv *Race) Price() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Race) MutatePrice(n int32) bool {
	return rcv._tab.MutateInt32Slot(22, n)
}

func (rcv *Race) LeagueType() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Race) MutateLeagueType(n int32) bool {
	return rcv._tab.MutateInt32Slot(24, n)
}

func (rcv *Race) SignupTime() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Race) MutateSignupTime(n int64) bool {
	return rcv._tab.MutateInt64Slot(26, n)
}

func (rcv *Race) GiveupTime() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Race) MutateGiveupTime(n int64) bool {
	return rcv._tab.MutateInt64Slot(28, n)
}

func (rcv *Race) StartTime() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Race) MutateStartTime(n int64) bool {
	return rcv._tab.MutateInt64Slot(30, n)
}

func (rcv *Race) Status() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Race) MutateStatus(n int32) bool {
	return rcv._tab.MutateInt32Slot(32, n)
}

func (rcv *Race) Round() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(34))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Race) MutateRound(n int32) bool {
	return rcv._tab.MutateInt32Slot(34, n)
}

func (rcv *Race) Rewards(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(36))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *Race) RewardsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(36))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *Race) RoomCnt() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(38))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Race) MutateRoomCnt(n int32) bool {
	return rcv._tab.MutateInt32Slot(38, n)
}

func (rcv *Race) RequireUserMin() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(40))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Race) MutateRequireUserMin(n int32) bool {
	return rcv._tab.MutateInt32Slot(40, n)
}

func (rcv *Race) PriceEntityId() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(42))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Race) MutatePriceEntityId(n int32) bool {
	return rcv._tab.MutateInt32Slot(42, n)
}

func (rcv *Race) Img() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(44))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func RaceStart(builder *flatbuffers.Builder) {
	builder.StartObject(21)
}
func RaceAddRaceId(builder *flatbuffers.Builder, raceId int64) {
	builder.PrependInt64Slot(0, raceId, 0)
}
func RaceAddLeagueId(builder *flatbuffers.Builder, leagueId int32) {
	builder.PrependInt32Slot(1, leagueId, 0)
}
func RaceAddName(builder *flatbuffers.Builder, name flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(name), 0)
}
func RaceAddIcon(builder *flatbuffers.Builder, icon int32) {
	builder.PrependInt32Slot(3, icon, 0)
}
func RaceAddGameType(builder *flatbuffers.Builder, gameType uint16) {
	builder.PrependUint16Slot(4, gameType, 0)
}
func RaceAddSetting(builder *flatbuffers.Builder, setting flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(setting), 0)
}
func RaceStartSettingVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(1, numElems, 1)
}
func RaceAddRounds(builder *flatbuffers.Builder, rounds flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(rounds), 0)
}
func RaceAddRequireUserCount(builder *flatbuffers.Builder, requireUserCount int32) {
	builder.PrependInt32Slot(7, requireUserCount, 0)
}
func RaceAddSignupUserCount(builder *flatbuffers.Builder, signupUserCount int32) {
	builder.PrependInt32Slot(8, signupUserCount, 0)
}
func RaceAddPrice(builder *flatbuffers.Builder, price int32) {
	builder.PrependInt32Slot(9, price, 0)
}
func RaceAddLeagueType(builder *flatbuffers.Builder, leagueType int32) {
	builder.PrependInt32Slot(10, leagueType, 0)
}
func RaceAddSignupTime(builder *flatbuffers.Builder, signupTime int64) {
	builder.PrependInt64Slot(11, signupTime, 0)
}
func RaceAddGiveupTime(builder *flatbuffers.Builder, giveupTime int64) {
	builder.PrependInt64Slot(12, giveupTime, 0)
}
func RaceAddStartTime(builder *flatbuffers.Builder, startTime int64) {
	builder.PrependInt64Slot(13, startTime, 0)
}
func RaceAddStatus(builder *flatbuffers.Builder, status int32) {
	builder.PrependInt32Slot(14, status, 0)
}
func RaceAddRound(builder *flatbuffers.Builder, round int32) {
	builder.PrependInt32Slot(15, round, 0)
}
func RaceAddRewards(builder *flatbuffers.Builder, rewards flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(16, flatbuffers.UOffsetT(rewards), 0)
}
func RaceStartRewardsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func RaceAddRoomCnt(builder *flatbuffers.Builder, roomCnt int32) {
	builder.PrependInt32Slot(17, roomCnt, 0)
}
func RaceAddRequireUserMin(builder *flatbuffers.Builder, requireUserMin int32) {
	builder.PrependInt32Slot(18, requireUserMin, 0)
}
func RaceAddPriceEntityId(builder *flatbuffers.Builder, priceEntityId int32) {
	builder.PrependInt32Slot(19, priceEntityId, 0)
}
func RaceAddImg(builder *flatbuffers.Builder, img flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(20, flatbuffers.UOffsetT(img), 0)
}
func RaceEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
