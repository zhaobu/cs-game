// automatically generated by the FlatBuffers compiler, do not modify

package Common

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type GameInitPush struct {
	_tab flatbuffers.Table
}

func GetRootAsGameInitPush(buf []byte, offset flatbuffers.UOffsetT) *GameInitPush {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &GameInitPush{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *GameInitPush) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *GameInitPush) CurrentRound() byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetByte(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *GameInitPush) MutateCurrentRound(n byte) bool {
	return rcv._tab.MutateByteSlot(4, n)
}

func (rcv *GameInitPush) Dealer() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *GameInitPush) MutateDealer(n uint32) bool {
	return rcv._tab.MutateUint32Slot(6, n)
}

func (rcv *GameInitPush) Dice(j int) byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetByte(a + flatbuffers.UOffsetT(j*1))
	}
	return 0
}

func (rcv *GameInitPush) DiceLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *GameInitPush) DiceBytes() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *GameInitPush) Tiles(j int) byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetByte(a + flatbuffers.UOffsetT(j*1))
	}
	return 0
}

func (rcv *GameInitPush) TilesLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *GameInitPush) TilesBytes() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *GameInitPush) DealCount() byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetByte(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *GameInitPush) MutateDealCount(n byte) bool {
	return rcv._tab.MutateByteSlot(12, n)
}

func GameInitPushStart(builder *flatbuffers.Builder) {
	builder.StartObject(5)
}
func GameInitPushAddCurrentRound(builder *flatbuffers.Builder, currentRound byte) {
	builder.PrependByteSlot(0, currentRound, 0)
}
func GameInitPushAddDealer(builder *flatbuffers.Builder, dealer uint32) {
	builder.PrependUint32Slot(1, dealer, 0)
}
func GameInitPushAddDice(builder *flatbuffers.Builder, dice flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(dice), 0)
}
func GameInitPushStartDiceVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(1, numElems, 1)
}
func GameInitPushAddTiles(builder *flatbuffers.Builder, tiles flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(tiles), 0)
}
func GameInitPushStartTilesVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(1, numElems, 1)
}
func GameInitPushAddDealCount(builder *flatbuffers.Builder, dealCount byte) {
	builder.PrependByteSlot(4, dealCount, 0)
}
func GameInitPushEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
