// automatically generated by the FlatBuffers compiler, do not modify

package Common

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type ScoreItem_v_2_3_0 struct {
	_tab flatbuffers.Table
}

func GetRootAsScoreItem_v_2_3_0(buf []byte, offset flatbuffers.UOffsetT) *ScoreItem_v_2_3_0 {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &ScoreItem_v_2_3_0{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *ScoreItem_v_2_3_0) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *ScoreItem_v_2_3_0) TypeId() uint16 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetUint16(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ScoreItem_v_2_3_0) MutateTypeId(n uint16) bool {
	return rcv._tab.MutateUint16Slot(4, n)
}

func (rcv *ScoreItem_v_2_3_0) Count() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ScoreItem_v_2_3_0) MutateCount(n uint32) bool {
	return rcv._tab.MutateUint32Slot(6, n)
}

func (rcv *ScoreItem_v_2_3_0) Tiles(j int) byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetByte(a + flatbuffers.UOffsetT(j*1))
	}
	return 0
}

func (rcv *ScoreItem_v_2_3_0) TilesLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *ScoreItem_v_2_3_0) TilesBytes() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *ScoreItem_v_2_3_0) Score() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ScoreItem_v_2_3_0) MutateScore(n int32) bool {
	return rcv._tab.MutateInt32Slot(10, n)
}

func (rcv *ScoreItem_v_2_3_0) ScoreCount() byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetByte(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ScoreItem_v_2_3_0) MutateScoreCount(n byte) bool {
	return rcv._tab.MutateByteSlot(12, n)
}

func (rcv *ScoreItem_v_2_3_0) Group() uint16 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetUint16(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ScoreItem_v_2_3_0) MutateGroup(n uint16) bool {
	return rcv._tab.MutateUint16Slot(14, n)
}

func ScoreItem_v_2_3_0Start(builder *flatbuffers.Builder) {
	builder.StartObject(6)
}
func ScoreItem_v_2_3_0AddTypeId(builder *flatbuffers.Builder, typeId uint16) {
	builder.PrependUint16Slot(0, typeId, 0)
}
func ScoreItem_v_2_3_0AddCount(builder *flatbuffers.Builder, Count uint32) {
	builder.PrependUint32Slot(1, Count, 0)
}
func ScoreItem_v_2_3_0AddTiles(builder *flatbuffers.Builder, Tiles flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(Tiles), 0)
}
func ScoreItem_v_2_3_0StartTilesVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(1, numElems, 1)
}
func ScoreItem_v_2_3_0AddScore(builder *flatbuffers.Builder, Score int32) {
	builder.PrependInt32Slot(3, Score, 0)
}
func ScoreItem_v_2_3_0AddScoreCount(builder *flatbuffers.Builder, ScoreCount byte) {
	builder.PrependByteSlot(4, ScoreCount, 0)
}
func ScoreItem_v_2_3_0AddGroup(builder *flatbuffers.Builder, group uint16) {
	builder.PrependUint16Slot(5, group, 0)
}
func ScoreItem_v_2_3_0End(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
