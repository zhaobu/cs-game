// automatically generated by the FlatBuffers compiler, do not modify

package Common

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type GameReadyNotify struct {
	_tab flatbuffers.Table
}

func GetRootAsGameReadyNotify(buf []byte, offset flatbuffers.UOffsetT) *GameReadyNotify {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &GameReadyNotify{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *GameReadyNotify) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *GameReadyNotify) Readying() byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetByte(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *GameReadyNotify) MutateReadying(n byte) bool {
	return rcv._tab.MutateByteSlot(4, n)
}

func (rcv *GameReadyNotify) Agree() byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetByte(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *GameReadyNotify) MutateAgree(n byte) bool {
	return rcv._tab.MutateByteSlot(6, n)
}

func (rcv *GameReadyNotify) Lng() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *GameReadyNotify) MutateLng(n float64) bool {
	return rcv._tab.MutateFloat64Slot(8, n)
}

func (rcv *GameReadyNotify) Lat() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *GameReadyNotify) MutateLat(n float64) bool {
	return rcv._tab.MutateFloat64Slot(10, n)
}

func GameReadyNotifyStart(builder *flatbuffers.Builder) {
	builder.StartObject(4)
}
func GameReadyNotifyAddReadying(builder *flatbuffers.Builder, readying byte) {
	builder.PrependByteSlot(0, readying, 0)
}
func GameReadyNotifyAddAgree(builder *flatbuffers.Builder, agree byte) {
	builder.PrependByteSlot(1, agree, 0)
}
func GameReadyNotifyAddLng(builder *flatbuffers.Builder, lng float64) {
	builder.PrependFloat64Slot(2, lng, 0.0)
}
func GameReadyNotifyAddLat(builder *flatbuffers.Builder, lat float64) {
	builder.PrependFloat64Slot(3, lat, 0.0)
}
func GameReadyNotifyEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
