// automatically generated by the FlatBuffers compiler, do not modify

package Common

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type GameResultPush struct {
	_tab flatbuffers.Table
}

func GetRootAsGameResultPush(buf []byte, offset flatbuffers.UOffsetT) *GameResultPush {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &GameResultPush{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *GameResultPush) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *GameResultPush) ResultInfo(obj *ResultInfo, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		if obj == nil {
			obj = new(ResultInfo)
		}
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *GameResultPush) ResultInfoLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *GameResultPush) Host() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *GameResultPush) MutateHost(n uint32) bool {
	return rcv._tab.MutateUint32Slot(6, n)
}

func (rcv *GameResultPush) IsDismiss() byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetByte(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *GameResultPush) MutateIsDismiss(n byte) bool {
	return rcv._tab.MutateByteSlot(8, n)
}

func (rcv *GameResultPush) ResultInfoV230(obj *ResultInfo_v_2_3_0, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		if obj == nil {
			obj = new(ResultInfo_v_2_3_0)
		}
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *GameResultPush) ResultInfoV230Length() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *GameResultPush) Number() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *GameResultPush) RandomRoom() byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetByte(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *GameResultPush) MutateRandomRoom(n byte) bool {
	return rcv._tab.MutateByteSlot(14, n)
}

func GameResultPushStart(builder *flatbuffers.Builder) {
	builder.StartObject(6)
}
func GameResultPushAddResultInfo(builder *flatbuffers.Builder, resultInfo flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(resultInfo), 0)
}
func GameResultPushStartResultInfoVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func GameResultPushAddHost(builder *flatbuffers.Builder, host uint32) {
	builder.PrependUint32Slot(1, host, 0)
}
func GameResultPushAddIsDismiss(builder *flatbuffers.Builder, isDismiss byte) {
	builder.PrependByteSlot(2, isDismiss, 0)
}
func GameResultPushAddResultInfoV230(builder *flatbuffers.Builder, resultInfoV230 flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(resultInfoV230), 0)
}
func GameResultPushStartResultInfoV230Vector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func GameResultPushAddNumber(builder *flatbuffers.Builder, number flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(number), 0)
}
func GameResultPushAddRandomRoom(builder *flatbuffers.Builder, randomRoom byte) {
	builder.PrependByteSlot(5, randomRoom, 0)
}
func GameResultPushEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
