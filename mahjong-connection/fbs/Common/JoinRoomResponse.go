// automatically generated by the FlatBuffers compiler, do not modify

package Common

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type JoinRoomResponse struct {
	_tab flatbuffers.Table
}

func GetRootAsJoinRoomResponse(buf []byte, offset flatbuffers.UOffsetT) *JoinRoomResponse {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &JoinRoomResponse{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *JoinRoomResponse) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *JoinRoomResponse) S2cResult(obj *GameResult) *GameResult {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(GameResult)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *JoinRoomResponse) RoomInfo(obj *RoomInfo) *RoomInfo {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(RoomInfo)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *JoinRoomResponse) RoomUserList(obj *RoomUserInfo, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		if obj == nil {
			obj = new(RoomUserInfo)
		}
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *JoinRoomResponse) RoomUserListLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *JoinRoomResponse) PrepareUsers(j int) uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetUint32(a + flatbuffers.UOffsetT(j*4))
	}
	return 0
}

func (rcv *JoinRoomResponse) PrepareUsersLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func JoinRoomResponseStart(builder *flatbuffers.Builder) {
	builder.StartObject(4)
}
func JoinRoomResponseAddS2cResult(builder *flatbuffers.Builder, s2cResult flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(s2cResult), 0)
}
func JoinRoomResponseAddRoomInfo(builder *flatbuffers.Builder, roomInfo flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(roomInfo), 0)
}
func JoinRoomResponseAddRoomUserList(builder *flatbuffers.Builder, roomUserList flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(roomUserList), 0)
}
func JoinRoomResponseStartRoomUserListVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func JoinRoomResponseAddPrepareUsers(builder *flatbuffers.Builder, prepareUsers flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(prepareUsers), 0)
}
func JoinRoomResponseStartPrepareUsersVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func JoinRoomResponseEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
