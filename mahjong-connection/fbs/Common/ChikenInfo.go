// automatically generated by the FlatBuffers compiler, do not modify

package Common

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type ChikenInfo struct {
	_tab flatbuffers.Table
}

func GetRootAsChikenInfo(buf []byte, offset flatbuffers.UOffsetT) *ChikenInfo {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &ChikenInfo{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *ChikenInfo) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *ChikenInfo) Tile() byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetByte(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ChikenInfo) MutateTile(n byte) bool {
	return rcv._tab.MutateByteSlot(4, n)
}

func (rcv *ChikenInfo) IsRecharge() byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetByte(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ChikenInfo) MutateIsRecharge(n byte) bool {
	return rcv._tab.MutateByteSlot(6, n)
}

func (rcv *ChikenInfo) IsBao() byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetByte(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ChikenInfo) MutateIsBao(n byte) bool {
	return rcv._tab.MutateByteSlot(8, n)
}

func (rcv *ChikenInfo) IsGold() byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetByte(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ChikenInfo) MutateIsGold(n byte) bool {
	return rcv._tab.MutateByteSlot(10, n)
}

func (rcv *ChikenInfo) ChikenType() uint16 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetUint16(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ChikenInfo) MutateChikenType(n uint16) bool {
	return rcv._tab.MutateUint16Slot(12, n)
}

func (rcv *ChikenInfo) Extra() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func ChikenInfoStart(builder *flatbuffers.Builder) {
	builder.StartObject(6)
}
func ChikenInfoAddTile(builder *flatbuffers.Builder, tile byte) {
	builder.PrependByteSlot(0, tile, 0)
}
func ChikenInfoAddIsRecharge(builder *flatbuffers.Builder, isRecharge byte) {
	builder.PrependByteSlot(1, isRecharge, 0)
}
func ChikenInfoAddIsBao(builder *flatbuffers.Builder, isBao byte) {
	builder.PrependByteSlot(2, isBao, 0)
}
func ChikenInfoAddIsGold(builder *flatbuffers.Builder, isGold byte) {
	builder.PrependByteSlot(3, isGold, 0)
}
func ChikenInfoAddChikenType(builder *flatbuffers.Builder, chikenType uint16) {
	builder.PrependUint16Slot(4, chikenType, 0)
}
func ChikenInfoAddExtra(builder *flatbuffers.Builder, extra flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(extra), 0)
}
func ChikenInfoEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
