// automatically generated by the FlatBuffers compiler, do not modify

package info

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type ApplyInfo struct {
	_tab flatbuffers.Table
}

func GetRootAsApplyInfo(buf []byte, offset flatbuffers.UOffsetT) *ApplyInfo {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &ApplyInfo{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *ApplyInfo) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *ApplyInfo) ApplyUser() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ApplyInfo) MutateApplyUser(n uint32) bool {
	return rcv._tab.MutateUint32Slot(4, n)
}

func (rcv *ApplyInfo) Nickname() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *ApplyInfo) IconUrl() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *ApplyInfo) Sex() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ApplyInfo) MutateSex(n uint32) bool {
	return rcv._tab.MutateUint32Slot(10, n)
}

func (rcv *ApplyInfo) ClubId() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ApplyInfo) MutateClubId(n uint32) bool {
	return rcv._tab.MutateUint32Slot(12, n)
}

func (rcv *ApplyInfo) ClubName() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *ApplyInfo) ApplyTime() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func ApplyInfoStart(builder *flatbuffers.Builder) {
	builder.StartObject(7)
}
func ApplyInfoAddApplyUser(builder *flatbuffers.Builder, applyUser uint32) {
	builder.PrependUint32Slot(0, applyUser, 0)
}
func ApplyInfoAddNickname(builder *flatbuffers.Builder, nickname flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(nickname), 0)
}
func ApplyInfoAddIconUrl(builder *flatbuffers.Builder, iconUrl flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(iconUrl), 0)
}
func ApplyInfoAddSex(builder *flatbuffers.Builder, sex uint32) {
	builder.PrependUint32Slot(3, sex, 0)
}
func ApplyInfoAddClubId(builder *flatbuffers.Builder, clubId uint32) {
	builder.PrependUint32Slot(4, clubId, 0)
}
func ApplyInfoAddClubName(builder *flatbuffers.Builder, clubName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(clubName), 0)
}
func ApplyInfoAddApplyTime(builder *flatbuffers.Builder, applyTime flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(applyTime), 0)
}
func ApplyInfoEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
