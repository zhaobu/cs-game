// automatically generated by the FlatBuffers compiler, do not modify

package info

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type TerminalTodayInfo struct {
	_tab flatbuffers.Table
}

func GetRootAsTerminalTodayInfo(buf []byte, offset flatbuffers.UOffsetT) *TerminalTodayInfo {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &TerminalTodayInfo{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *TerminalTodayInfo) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *TerminalTodayInfo) TotalRounds() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *TerminalTodayInfo) MutateTotalRounds(n int32) bool {
	return rcv._tab.MutateInt32Slot(4, n)
}

func (rcv *TerminalTodayInfo) Loses() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *TerminalTodayInfo) MutateLoses(n int32) bool {
	return rcv._tab.MutateInt32Slot(6, n)
}

func (rcv *TerminalTodayInfo) Wins() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *TerminalTodayInfo) MutateWins(n int32) bool {
	return rcv._tab.MutateInt32Slot(8, n)
}

func (rcv *TerminalTodayInfo) Score() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *TerminalTodayInfo) MutateScore(n int32) bool {
	return rcv._tab.MutateInt32Slot(10, n)
}

func TerminalTodayInfoStart(builder *flatbuffers.Builder) {
	builder.StartObject(4)
}
func TerminalTodayInfoAddTotalRounds(builder *flatbuffers.Builder, totalRounds int32) {
	builder.PrependInt32Slot(0, totalRounds, 0)
}
func TerminalTodayInfoAddLoses(builder *flatbuffers.Builder, loses int32) {
	builder.PrependInt32Slot(1, loses, 0)
}
func TerminalTodayInfoAddWins(builder *flatbuffers.Builder, wins int32) {
	builder.PrependInt32Slot(2, wins, 0)
}
func TerminalTodayInfoAddScore(builder *flatbuffers.Builder, score int32) {
	builder.PrependInt32Slot(3, score, 0)
}
func TerminalTodayInfoEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
