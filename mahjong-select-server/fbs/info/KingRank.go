// automatically generated by the FlatBuffers compiler, do not modify

package info

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type KingRank struct {
	_tab flatbuffers.Table
}

func GetRootAsKingRank(buf []byte, offset flatbuffers.UOffsetT) *KingRank {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &KingRank{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *KingRank) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *KingRank) Position() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *KingRank) MutatePosition(n int32) bool {
	return rcv._tab.MutateInt32Slot(4, n)
}

func (rcv *KingRank) Icon() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *KingRank) Nickname() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *KingRank) RankInfo() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *KingRank) MutateRankInfo(n int32) bool {
	return rcv._tab.MutateInt32Slot(10, n)
}

func (rcv *KingRank) TotalScore() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *KingRank) MutateTotalScore(n int32) bool {
	return rcv._tab.MutateInt32Slot(12, n)
}

func KingRankStart(builder *flatbuffers.Builder) {
	builder.StartObject(5)
}
func KingRankAddPosition(builder *flatbuffers.Builder, position int32) {
	builder.PrependInt32Slot(0, position, 0)
}
func KingRankAddIcon(builder *flatbuffers.Builder, icon flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(icon), 0)
}
func KingRankAddNickname(builder *flatbuffers.Builder, nickname flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(nickname), 0)
}
func KingRankAddRankInfo(builder *flatbuffers.Builder, rankInfo int32) {
	builder.PrependInt32Slot(3, rankInfo, 0)
}
func KingRankAddTotalScore(builder *flatbuffers.Builder, totalScore int32) {
	builder.PrependInt32Slot(4, totalScore, 0)
}
func KingRankEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
