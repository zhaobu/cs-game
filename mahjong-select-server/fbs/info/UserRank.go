// automatically generated by the FlatBuffers compiler, do not modify

package info

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type UserRank struct {
	_tab flatbuffers.Table
}

func GetRootAsUserRank(buf []byte, offset flatbuffers.UOffsetT) *UserRank {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &UserRank{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *UserRank) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *UserRank) RankType() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *UserRank) MutateRankType(n uint32) bool {
	return rcv._tab.MutateUint32Slot(4, n)
}

func (rcv *UserRank) MinScore() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *UserRank) MutateMinScore(n int32) bool {
	return rcv._tab.MutateInt32Slot(6, n)
}

func (rcv *UserRank) MaxScore() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *UserRank) MutateMaxScore(n uint32) bool {
	return rcv._tab.MutateUint32Slot(8, n)
}

func UserRankStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func UserRankAddRankType(builder *flatbuffers.Builder, rankType uint32) {
	builder.PrependUint32Slot(0, rankType, 0)
}
func UserRankAddMinScore(builder *flatbuffers.Builder, minScore int32) {
	builder.PrependInt32Slot(1, minScore, 0)
}
func UserRankAddMaxScore(builder *flatbuffers.Builder, maxScore uint32) {
	builder.PrependUint32Slot(2, maxScore, 0)
}
func UserRankEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
