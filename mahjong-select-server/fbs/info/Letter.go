// automatically generated by the FlatBuffers compiler, do not modify

package info

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type Letter struct {
	_tab flatbuffers.Table
}

func GetRootAsLetter(buf []byte, offset flatbuffers.UOffsetT) *Letter {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Letter{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *Letter) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Letter) Id() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Letter) MutateId(n int32) bool {
	return rcv._tab.MutateInt32Slot(4, n)
}

func (rcv *Letter) Title() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Letter) SendTime() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Letter) MutateSendTime(n int32) bool {
	return rcv._tab.MutateInt32Slot(8, n)
}

func (rcv *Letter) Icon() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Letter) IsNew() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Letter) MutateIsNew(n int32) bool {
	return rcv._tab.MutateInt32Slot(12, n)
}

func LetterStart(builder *flatbuffers.Builder) {
	builder.StartObject(5)
}
func LetterAddId(builder *flatbuffers.Builder, id int32) {
	builder.PrependInt32Slot(0, id, 0)
}
func LetterAddTitle(builder *flatbuffers.Builder, title flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(title), 0)
}
func LetterAddSendTime(builder *flatbuffers.Builder, sendTime int32) {
	builder.PrependInt32Slot(2, sendTime, 0)
}
func LetterAddIcon(builder *flatbuffers.Builder, icon flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(icon), 0)
}
func LetterAddIsNew(builder *flatbuffers.Builder, isNew int32) {
	builder.PrependInt32Slot(4, isNew, 0)
}
func LetterEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
