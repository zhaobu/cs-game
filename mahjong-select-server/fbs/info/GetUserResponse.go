// automatically generated by the FlatBuffers compiler, do not modify

package info

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type GetUserResponse struct {
	_tab flatbuffers.Table
}

func GetRootAsGetUserResponse(buf []byte, offset flatbuffers.UOffsetT) *GetUserResponse {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &GetUserResponse{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *GetUserResponse) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *GetUserResponse) Result(obj *CommonResult) *CommonResult {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(CommonResult)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *GetUserResponse) UserId() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *GetUserResponse) MutateUserId(n uint32) bool {
	return rcv._tab.MutateUint32Slot(6, n)
}

func (rcv *GetUserResponse) Money() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *GetUserResponse) MutateMoney(n int32) bool {
	return rcv._tab.MutateInt32Slot(8, n)
}

func (rcv *GetUserResponse) Score() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *GetUserResponse) MutateScore(n int32) bool {
	return rcv._tab.MutateInt32Slot(10, n)
}

func (rcv *GetUserResponse) Nickname() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *GetUserResponse) Sex() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *GetUserResponse) City() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *GetUserResponse) Headimgurl() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *GetUserResponse) Unionid() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *GetUserResponse) Country() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *GetUserResponse) Province() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *GetUserResponse) Language() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *GetUserResponse) Mobile() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *GetUserResponse) Freescore() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *GetUserResponse) MutateFreescore(n int32) bool {
	return rcv._tab.MutateInt32Slot(30, n)
}

func (rcv *GetUserResponse) Usertype() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 1
}

func (rcv *GetUserResponse) MutateUsertype(n uint32) bool {
	return rcv._tab.MutateUint32Slot(32, n)
}

func (rcv *GetUserResponse) Coins() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(34))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *GetUserResponse) MutateCoins(n int32) bool {
	return rcv._tab.MutateInt32Slot(34, n)
}

func GetUserResponseStart(builder *flatbuffers.Builder) {
	builder.StartObject(16)
}
func GetUserResponseAddResult(builder *flatbuffers.Builder, result flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(result), 0)
}
func GetUserResponseAddUserId(builder *flatbuffers.Builder, userId uint32) {
	builder.PrependUint32Slot(1, userId, 0)
}
func GetUserResponseAddMoney(builder *flatbuffers.Builder, money int32) {
	builder.PrependInt32Slot(2, money, 0)
}
func GetUserResponseAddScore(builder *flatbuffers.Builder, score int32) {
	builder.PrependInt32Slot(3, score, 0)
}
func GetUserResponseAddNickname(builder *flatbuffers.Builder, nickname flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(nickname), 0)
}
func GetUserResponseAddSex(builder *flatbuffers.Builder, sex flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(sex), 0)
}
func GetUserResponseAddCity(builder *flatbuffers.Builder, city flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(city), 0)
}
func GetUserResponseAddHeadimgurl(builder *flatbuffers.Builder, headimgurl flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(7, flatbuffers.UOffsetT(headimgurl), 0)
}
func GetUserResponseAddUnionid(builder *flatbuffers.Builder, unionid flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(8, flatbuffers.UOffsetT(unionid), 0)
}
func GetUserResponseAddCountry(builder *flatbuffers.Builder, country flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(9, flatbuffers.UOffsetT(country), 0)
}
func GetUserResponseAddProvince(builder *flatbuffers.Builder, province flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(10, flatbuffers.UOffsetT(province), 0)
}
func GetUserResponseAddLanguage(builder *flatbuffers.Builder, language flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(11, flatbuffers.UOffsetT(language), 0)
}
func GetUserResponseAddMobile(builder *flatbuffers.Builder, mobile flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(12, flatbuffers.UOffsetT(mobile), 0)
}
func GetUserResponseAddFreescore(builder *flatbuffers.Builder, freescore int32) {
	builder.PrependInt32Slot(13, freescore, 0)
}
func GetUserResponseAddUsertype(builder *flatbuffers.Builder, usertype uint32) {
	builder.PrependUint32Slot(14, usertype, 1)
}
func GetUserResponseAddCoins(builder *flatbuffers.Builder, coins int32) {
	builder.PrependInt32Slot(15, coins, 0)
}
func GetUserResponseEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
