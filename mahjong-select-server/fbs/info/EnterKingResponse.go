// automatically generated by the FlatBuffers compiler, do not modify

package info

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type EnterKingResponse struct {
	_tab flatbuffers.Table
}

func GetRootAsEnterKingResponse(buf []byte, offset flatbuffers.UOffsetT) *EnterKingResponse {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &EnterKingResponse{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *EnterKingResponse) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *EnterKingResponse) Result(obj *CommonResult) *CommonResult {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(CommonResult)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *EnterKingResponse) UserId() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *EnterKingResponse) MutateUserId(n uint32) bool {
	return rcv._tab.MutateUint32Slot(6, n)
}

func (rcv *EnterKingResponse) RoomId() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *EnterKingResponse) MutateRoomId(n uint32) bool {
	return rcv._tab.MutateUint32Slot(8, n)
}

func (rcv *EnterKingResponse) Ip() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *EnterKingResponse) Port() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *EnterKingResponse) MutatePort(n int32) bool {
	return rcv._tab.MutateInt32Slot(12, n)
}

func (rcv *EnterKingResponse) IsScore() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *EnterKingResponse) MutateIsScore(n uint32) bool {
	return rcv._tab.MutateUint32Slot(14, n)
}

func (rcv *EnterKingResponse) IsMoney() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *EnterKingResponse) MutateIsMoney(n uint32) bool {
	return rcv._tab.MutateUint32Slot(16, n)
}

func (rcv *EnterKingResponse) IsDelay() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *EnterKingResponse) MutateIsDelay(n uint32) bool {
	return rcv._tab.MutateUint32Slot(18, n)
}

func EnterKingResponseStart(builder *flatbuffers.Builder) {
	builder.StartObject(8)
}
func EnterKingResponseAddResult(builder *flatbuffers.Builder, result flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(result), 0)
}
func EnterKingResponseAddUserId(builder *flatbuffers.Builder, userId uint32) {
	builder.PrependUint32Slot(1, userId, 0)
}
func EnterKingResponseAddRoomId(builder *flatbuffers.Builder, roomId uint32) {
	builder.PrependUint32Slot(2, roomId, 0)
}
func EnterKingResponseAddIp(builder *flatbuffers.Builder, ip flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(ip), 0)
}
func EnterKingResponseAddPort(builder *flatbuffers.Builder, port int32) {
	builder.PrependInt32Slot(4, port, 0)
}
func EnterKingResponseAddIsScore(builder *flatbuffers.Builder, isScore uint32) {
	builder.PrependUint32Slot(5, isScore, 0)
}
func EnterKingResponseAddIsMoney(builder *flatbuffers.Builder, isMoney uint32) {
	builder.PrependUint32Slot(6, isMoney, 0)
}
func EnterKingResponseAddIsDelay(builder *flatbuffers.Builder, isDelay uint32) {
	builder.PrependUint32Slot(7, isDelay, 0)
}
func EnterKingResponseEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
