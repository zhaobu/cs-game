// automatically generated by the FlatBuffers compiler, do not modify

package info

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type RoomLogTerminalResponse struct {
	_tab flatbuffers.Table
}

func GetRootAsRoomLogTerminalResponse(buf []byte, offset flatbuffers.UOffsetT) *RoomLogTerminalResponse {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &RoomLogTerminalResponse{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *RoomLogTerminalResponse) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *RoomLogTerminalResponse) Result(obj *CommonResult) *CommonResult {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(CommonResult)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *RoomLogTerminalResponse) TotalToday(obj *TerminalTodayInfo) *TerminalTodayInfo {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(TerminalTodayInfo)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *RoomLogTerminalResponse) TotalPage() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *RoomLogTerminalResponse) MutateTotalPage(n int32) bool {
	return rcv._tab.MutateInt32Slot(8, n)
}

func (rcv *RoomLogTerminalResponse) CurPage() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *RoomLogTerminalResponse) MutateCurPage(n int32) bool {
	return rcv._tab.MutateInt32Slot(10, n)
}

func (rcv *RoomLogTerminalResponse) RoomList(obj *TerminalRoomInfo, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		if obj == nil {
			obj = new(TerminalRoomInfo)
		}
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *RoomLogTerminalResponse) RoomListLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *RoomLogTerminalResponse) QueryUser() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *RoomLogTerminalResponse) TypeList(obj *TerminalTypeInfo, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		if obj == nil {
			obj = new(TerminalTypeInfo)
		}
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *RoomLogTerminalResponse) TypeListLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func RoomLogTerminalResponseStart(builder *flatbuffers.Builder) {
	builder.StartObject(7)
}
func RoomLogTerminalResponseAddResult(builder *flatbuffers.Builder, result flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(result), 0)
}
func RoomLogTerminalResponseAddTotalToday(builder *flatbuffers.Builder, totalToday flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(totalToday), 0)
}
func RoomLogTerminalResponseAddTotalPage(builder *flatbuffers.Builder, totalPage int32) {
	builder.PrependInt32Slot(2, totalPage, 0)
}
func RoomLogTerminalResponseAddCurPage(builder *flatbuffers.Builder, curPage int32) {
	builder.PrependInt32Slot(3, curPage, 0)
}
func RoomLogTerminalResponseAddRoomList(builder *flatbuffers.Builder, roomList flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(roomList), 0)
}
func RoomLogTerminalResponseStartRoomListVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func RoomLogTerminalResponseAddQueryUser(builder *flatbuffers.Builder, queryUser flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(queryUser), 0)
}
func RoomLogTerminalResponseAddTypeList(builder *flatbuffers.Builder, typeList flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(typeList), 0)
}
func RoomLogTerminalResponseStartTypeListVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func RoomLogTerminalResponseEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
