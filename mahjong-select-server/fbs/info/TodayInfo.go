// automatically generated by the FlatBuffers compiler, do not modify

package info

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type TodayInfo struct {
	_tab flatbuffers.Table
}

func GetRootAsTodayInfo(buf []byte, offset flatbuffers.UOffsetT) *TodayInfo {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &TodayInfo{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *TodayInfo) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *TodayInfo) TotalRounds() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *TodayInfo) MutateTotalRounds(n int32) bool {
	return rcv._tab.MutateInt32Slot(4, n)
}

func (rcv *TodayInfo) Loses() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *TodayInfo) MutateLoses(n int32) bool {
	return rcv._tab.MutateInt32Slot(6, n)
}

func (rcv *TodayInfo) Wins() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *TodayInfo) MutateWins(n int32) bool {
	return rcv._tab.MutateInt32Slot(8, n)
}

func (rcv *TodayInfo) Score() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *TodayInfo) MutateScore(n int32) bool {
	return rcv._tab.MutateInt32Slot(10, n)
}

func TodayInfoStart(builder *flatbuffers.Builder) {
	builder.StartObject(4)
}
func TodayInfoAddTotalRounds(builder *flatbuffers.Builder, totalRounds int32) {
	builder.PrependInt32Slot(0, totalRounds, 0)
}
func TodayInfoAddLoses(builder *flatbuffers.Builder, loses int32) {
	builder.PrependInt32Slot(1, loses, 0)
}
func TodayInfoAddWins(builder *flatbuffers.Builder, wins int32) {
	builder.PrependInt32Slot(2, wins, 0)
}
func TodayInfoAddScore(builder *flatbuffers.Builder, score int32) {
	builder.PrependInt32Slot(3, score, 0)
}
func TodayInfoEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
