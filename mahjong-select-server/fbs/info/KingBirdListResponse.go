// automatically generated by the FlatBuffers compiler, do not modify

package info

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type KingBirdListResponse struct {
	_tab flatbuffers.Table
}

func GetRootAsKingBirdListResponse(buf []byte, offset flatbuffers.UOffsetT) *KingBirdListResponse {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &KingBirdListResponse{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *KingBirdListResponse) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *KingBirdListResponse) Result(obj *CommonResult) *CommonResult {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(CommonResult)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *KingBirdListResponse) ListType() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *KingBirdListResponse) MutateListType(n int32) bool {
	return rcv._tab.MutateInt32Slot(6, n)
}

func (rcv *KingBirdListResponse) Rewards(obj *KingReward, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		if obj == nil {
			obj = new(KingReward)
		}
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *KingBirdListResponse) RewardsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *KingBirdListResponse) Ranklist(obj *KingRank, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		if obj == nil {
			obj = new(KingRank)
		}
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *KingBirdListResponse) RanklistLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *KingBirdListResponse) MyRankInfo(obj *KingMyRank) *KingMyRank {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(KingMyRank)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func KingBirdListResponseStart(builder *flatbuffers.Builder) {
	builder.StartObject(5)
}
func KingBirdListResponseAddResult(builder *flatbuffers.Builder, result flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(result), 0)
}
func KingBirdListResponseAddListType(builder *flatbuffers.Builder, listType int32) {
	builder.PrependInt32Slot(1, listType, 0)
}
func KingBirdListResponseAddRewards(builder *flatbuffers.Builder, rewards flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(rewards), 0)
}
func KingBirdListResponseStartRewardsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func KingBirdListResponseAddRanklist(builder *flatbuffers.Builder, ranklist flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(ranklist), 0)
}
func KingBirdListResponseStartRanklistVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func KingBirdListResponseAddMyRankInfo(builder *flatbuffers.Builder, myRankInfo flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(myRankInfo), 0)
}
func KingBirdListResponseEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
