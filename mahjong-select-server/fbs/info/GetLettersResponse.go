// automatically generated by the FlatBuffers compiler, do not modify

package info

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type GetLettersResponse struct {
	_tab flatbuffers.Table
}

func GetRootAsGetLettersResponse(buf []byte, offset flatbuffers.UOffsetT) *GetLettersResponse {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &GetLettersResponse{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *GetLettersResponse) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *GetLettersResponse) Result(obj *CommonResult) *CommonResult {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(CommonResult)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *GetLettersResponse) Letters(obj *Letter, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		if obj == nil {
			obj = new(Letter)
		}
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *GetLettersResponse) LettersLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *GetLettersResponse) TotalPage() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 1
}

func (rcv *GetLettersResponse) MutateTotalPage(n uint32) bool {
	return rcv._tab.MutateUint32Slot(8, n)
}

func GetLettersResponseStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func GetLettersResponseAddResult(builder *flatbuffers.Builder, result flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(result), 0)
}
func GetLettersResponseAddLetters(builder *flatbuffers.Builder, letters flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(letters), 0)
}
func GetLettersResponseStartLettersVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func GetLettersResponseAddTotalPage(builder *flatbuffers.Builder, totalPage uint32) {
	builder.PrependUint32Slot(2, totalPage, 1)
}
func GetLettersResponseEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
