// automatically generated by the FlatBuffers compiler, do not modify

package info

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type GetNewResponse struct {
	_tab flatbuffers.Table
}

func GetRootAsGetNewResponse(buf []byte, offset flatbuffers.UOffsetT) *GetNewResponse {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &GetNewResponse{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *GetNewResponse) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *GetNewResponse) Result(obj *CommonResult) *CommonResult {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(CommonResult)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *GetNewResponse) NewActivity() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *GetNewResponse) MutateNewActivity(n int32) bool {
	return rcv._tab.MutateInt32Slot(6, n)
}

func (rcv *GetNewResponse) NewLetter() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *GetNewResponse) MutateNewLetter(n int32) bool {
	return rcv._tab.MutateInt32Slot(8, n)
}

func GetNewResponseStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func GetNewResponseAddResult(builder *flatbuffers.Builder, result flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(result), 0)
}
func GetNewResponseAddNewActivity(builder *flatbuffers.Builder, newActivity int32) {
	builder.PrependInt32Slot(1, newActivity, 0)
}
func GetNewResponseAddNewLetter(builder *flatbuffers.Builder, newLetter int32) {
	builder.PrependInt32Slot(2, newLetter, 0)
}
func GetNewResponseEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
