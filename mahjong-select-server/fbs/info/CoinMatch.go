// automatically generated by the FlatBuffers compiler, do not modify

package info

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type CoinMatch struct {
	_tab flatbuffers.Table
}

func GetRootAsCoinMatch(buf []byte, offset flatbuffers.UOffsetT) *CoinMatch {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &CoinMatch{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *CoinMatch) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *CoinMatch) MahjongType() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *CoinMatch) MutateMahjongType(n uint32) bool {
	return rcv._tab.MutateUint32Slot(4, n)
}

func (rcv *CoinMatch) MatchType() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *CoinMatch) MutateMatchType(n uint32) bool {
	return rcv._tab.MutateUint32Slot(6, n)
}

func (rcv *CoinMatch) BaseCoin() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *CoinMatch) MutateBaseCoin(n uint32) bool {
	return rcv._tab.MutateUint32Slot(8, n)
}

func (rcv *CoinMatch) RequireLowCoin() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *CoinMatch) MutateRequireLowCoin(n int32) bool {
	return rcv._tab.MutateInt32Slot(10, n)
}

func (rcv *CoinMatch) RequireHighCoin() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *CoinMatch) MutateRequireHighCoin(n uint32) bool {
	return rcv._tab.MutateUint32Slot(12, n)
}

func (rcv *CoinMatch) ConsumeCoin() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *CoinMatch) MutateConsumeCoin(n uint32) bool {
	return rcv._tab.MutateUint32Slot(14, n)
}

func (rcv *CoinMatch) UserTotal() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *CoinMatch) MutateUserTotal(n uint32) bool {
	return rcv._tab.MutateUint32Slot(16, n)
}

func CoinMatchStart(builder *flatbuffers.Builder) {
	builder.StartObject(7)
}
func CoinMatchAddMahjongType(builder *flatbuffers.Builder, mahjongType uint32) {
	builder.PrependUint32Slot(0, mahjongType, 0)
}
func CoinMatchAddMatchType(builder *flatbuffers.Builder, matchType uint32) {
	builder.PrependUint32Slot(1, matchType, 0)
}
func CoinMatchAddBaseCoin(builder *flatbuffers.Builder, baseCoin uint32) {
	builder.PrependUint32Slot(2, baseCoin, 0)
}
func CoinMatchAddRequireLowCoin(builder *flatbuffers.Builder, requireLowCoin int32) {
	builder.PrependInt32Slot(3, requireLowCoin, 0)
}
func CoinMatchAddRequireHighCoin(builder *flatbuffers.Builder, requireHighCoin uint32) {
	builder.PrependUint32Slot(4, requireHighCoin, 0)
}
func CoinMatchAddConsumeCoin(builder *flatbuffers.Builder, consumeCoin uint32) {
	builder.PrependUint32Slot(5, consumeCoin, 0)
}
func CoinMatchAddUserTotal(builder *flatbuffers.Builder, userTotal uint32) {
	builder.PrependUint32Slot(6, userTotal, 0)
}
func CoinMatchEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
