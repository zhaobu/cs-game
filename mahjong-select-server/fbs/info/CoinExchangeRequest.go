// automatically generated by the FlatBuffers compiler, do not modify

package info

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type CoinExchangeRequest struct {
	_tab flatbuffers.Table
}

func GetRootAsCoinExchangeRequest(buf []byte, offset flatbuffers.UOffsetT) *CoinExchangeRequest {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &CoinExchangeRequest{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *CoinExchangeRequest) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *CoinExchangeRequest) BuyType() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *CoinExchangeRequest) MutateBuyType(n int32) bool {
	return rcv._tab.MutateInt32Slot(4, n)
}

func (rcv *CoinExchangeRequest) ProductId() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *CoinExchangeRequest) MutateProductId(n int32) bool {
	return rcv._tab.MutateInt32Slot(6, n)
}

func CoinExchangeRequestStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func CoinExchangeRequestAddBuyType(builder *flatbuffers.Builder, buyType int32) {
	builder.PrependInt32Slot(0, buyType, 0)
}
func CoinExchangeRequestAddProductId(builder *flatbuffers.Builder, productId int32) {
	builder.PrependInt32Slot(1, productId, 0)
}
func CoinExchangeRequestEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
