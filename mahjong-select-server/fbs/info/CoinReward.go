// automatically generated by the FlatBuffers compiler, do not modify

package info

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type CoinReward struct {
	_tab flatbuffers.Table
}

func GetRootAsCoinReward(buf []byte, offset flatbuffers.UOffsetT) *CoinReward {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &CoinReward{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *CoinReward) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *CoinReward) Total() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *CoinReward) MutateTotal(n uint32) bool {
	return rcv._tab.MutateUint32Slot(4, n)
}

func (rcv *CoinReward) CurNum() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *CoinReward) MutateCurNum(n uint32) bool {
	return rcv._tab.MutateUint32Slot(6, n)
}

func (rcv *CoinReward) LowCoin() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *CoinReward) MutateLowCoin(n uint32) bool {
	return rcv._tab.MutateUint32Slot(8, n)
}

func (rcv *CoinReward) RewardCoin() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *CoinReward) MutateRewardCoin(n uint32) bool {
	return rcv._tab.MutateUint32Slot(10, n)
}

func CoinRewardStart(builder *flatbuffers.Builder) {
	builder.StartObject(4)
}
func CoinRewardAddTotal(builder *flatbuffers.Builder, total uint32) {
	builder.PrependUint32Slot(0, total, 0)
}
func CoinRewardAddCurNum(builder *flatbuffers.Builder, curNum uint32) {
	builder.PrependUint32Slot(1, curNum, 0)
}
func CoinRewardAddLowCoin(builder *flatbuffers.Builder, lowCoin uint32) {
	builder.PrependUint32Slot(2, lowCoin, 0)
}
func CoinRewardAddRewardCoin(builder *flatbuffers.Builder, rewardCoin uint32) {
	builder.PrependUint32Slot(3, rewardCoin, 0)
}
func CoinRewardEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
