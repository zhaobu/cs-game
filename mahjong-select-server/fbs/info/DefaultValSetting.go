// automatically generated by the FlatBuffers compiler, do not modify

package info

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type DefaultValSetting struct {
	_tab flatbuffers.Table
}

func GetRootAsDefaultValSetting(buf []byte, offset flatbuffers.UOffsetT) *DefaultValSetting {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &DefaultValSetting{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *DefaultValSetting) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *DefaultValSetting) DefRounds() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *DefaultValSetting) DefUsers() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *DefaultValSetting) DefChicken() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *DefaultValSetting) DefPlayFuc() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func DefaultValSettingStart(builder *flatbuffers.Builder) {
	builder.StartObject(4)
}
func DefaultValSettingAddDefRounds(builder *flatbuffers.Builder, defRounds flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(defRounds), 0)
}
func DefaultValSettingAddDefUsers(builder *flatbuffers.Builder, defUsers flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(defUsers), 0)
}
func DefaultValSettingAddDefChicken(builder *flatbuffers.Builder, defChicken flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(defChicken), 0)
}
func DefaultValSettingAddDefPlayFuc(builder *flatbuffers.Builder, defPlayFuc flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(defPlayFuc), 0)
}
func DefaultValSettingEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
