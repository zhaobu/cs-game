// automatically generated by the FlatBuffers compiler, do not modify

package info

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type Adv struct {
	_tab flatbuffers.Table
}

func GetRootAsAdv(buf []byte, offset flatbuffers.UOffsetT) *Adv {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Adv{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *Adv) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Adv) Id() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Adv) MutateId(n int32) bool {
	return rcv._tab.MutateInt32Slot(4, n)
}

func (rcv *Adv) Weight() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Adv) MutateWeight(n int32) bool {
	return rcv._tab.MutateInt32Slot(6, n)
}

func (rcv *Adv) Pic() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Adv) LinkType() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Adv) MutateLinkType(n uint32) bool {
	return rcv._tab.MutateUint32Slot(10, n)
}

func (rcv *Adv) Link() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func AdvStart(builder *flatbuffers.Builder) {
	builder.StartObject(5)
}
func AdvAddId(builder *flatbuffers.Builder, id int32) {
	builder.PrependInt32Slot(0, id, 0)
}
func AdvAddWeight(builder *flatbuffers.Builder, weight int32) {
	builder.PrependInt32Slot(1, weight, 0)
}
func AdvAddPic(builder *flatbuffers.Builder, pic flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(pic), 0)
}
func AdvAddLinkType(builder *flatbuffers.Builder, linkType uint32) {
	builder.PrependUint32Slot(3, linkType, 0)
}
func AdvAddLink(builder *flatbuffers.Builder, link flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(link), 0)
}
func AdvEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
