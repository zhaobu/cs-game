// automatically generated by the FlatBuffers compiler, do not modify

package info

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type Product struct {
	_tab flatbuffers.Table
}

func GetRootAsProduct(buf []byte, offset flatbuffers.UOffsetT) *Product {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Product{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *Product) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Product) Id() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Product) MutateId(n int32) bool {
	return rcv._tab.MutateInt32Slot(4, n)
}

func (rcv *Product) ProductName() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Product) Price() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *Product) MutatePrice(n float32) bool {
	return rcv._tab.MutateFloat32Slot(8, n)
}

func (rcv *Product) Diamonds() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Product) MutateDiamonds(n int32) bool {
	return rcv._tab.MutateInt32Slot(10, n)
}

func (rcv *Product) Discount() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Product) IosFlag() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Product) MutateIosFlag(n int32) bool {
	return rcv._tab.MutateInt32Slot(14, n)
}

func ProductStart(builder *flatbuffers.Builder) {
	builder.StartObject(6)
}
func ProductAddId(builder *flatbuffers.Builder, id int32) {
	builder.PrependInt32Slot(0, id, 0)
}
func ProductAddProductName(builder *flatbuffers.Builder, productName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(productName), 0)
}
func ProductAddPrice(builder *flatbuffers.Builder, price float32) {
	builder.PrependFloat32Slot(2, price, 0.0)
}
func ProductAddDiamonds(builder *flatbuffers.Builder, diamonds int32) {
	builder.PrependInt32Slot(3, diamonds, 0)
}
func ProductAddDiscount(builder *flatbuffers.Builder, discount flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(discount), 0)
}
func ProductAddIosFlag(builder *flatbuffers.Builder, iosFlag int32) {
	builder.PrependInt32Slot(5, iosFlag, 0)
}
func ProductEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
