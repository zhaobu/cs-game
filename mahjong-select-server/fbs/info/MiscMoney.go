// automatically generated by the FlatBuffers compiler, do not modify

package info

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type MiscMoney struct {
	_tab flatbuffers.Table
}

func GetRootAsMiscMoney(buf []byte, offset flatbuffers.UOffsetT) *MiscMoney {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &MiscMoney{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *MiscMoney) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *MiscMoney) Money() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MiscMoney) MutateMoney(n int32) bool {
	return rcv._tab.MutateInt32Slot(4, n)
}

func (rcv *MiscMoney) Coin() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MiscMoney) MutateCoin(n int32) bool {
	return rcv._tab.MutateInt32Slot(6, n)
}

func (rcv *MiscMoney) Extra1() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *MiscMoney) Extra2() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *MiscMoney) Extra3() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *MiscMoney) Extra4() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *MiscMoney) Extra5() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *MiscMoney) Extra6() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *MiscMoney) Extra7() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *MiscMoney) Extra8() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *MiscMoney) Extra9() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *MiscMoney) Extra10() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func MiscMoneyStart(builder *flatbuffers.Builder) {
	builder.StartObject(12)
}
func MiscMoneyAddMoney(builder *flatbuffers.Builder, money int32) {
	builder.PrependInt32Slot(0, money, 0)
}
func MiscMoneyAddCoin(builder *flatbuffers.Builder, coin int32) {
	builder.PrependInt32Slot(1, coin, 0)
}
func MiscMoneyAddExtra1(builder *flatbuffers.Builder, extra1 flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(extra1), 0)
}
func MiscMoneyAddExtra2(builder *flatbuffers.Builder, extra2 flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(extra2), 0)
}
func MiscMoneyAddExtra3(builder *flatbuffers.Builder, extra3 flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(extra3), 0)
}
func MiscMoneyAddExtra4(builder *flatbuffers.Builder, extra4 flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(extra4), 0)
}
func MiscMoneyAddExtra5(builder *flatbuffers.Builder, extra5 flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(extra5), 0)
}
func MiscMoneyAddExtra6(builder *flatbuffers.Builder, extra6 flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(7, flatbuffers.UOffsetT(extra6), 0)
}
func MiscMoneyAddExtra7(builder *flatbuffers.Builder, extra7 flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(8, flatbuffers.UOffsetT(extra7), 0)
}
func MiscMoneyAddExtra8(builder *flatbuffers.Builder, extra8 flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(9, flatbuffers.UOffsetT(extra8), 0)
}
func MiscMoneyAddExtra9(builder *flatbuffers.Builder, extra9 flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(10, flatbuffers.UOffsetT(extra9), 0)
}
func MiscMoneyAddExtra10(builder *flatbuffers.Builder, extra10 flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(11, flatbuffers.UOffsetT(extra10), 0)
}
func MiscMoneyEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
