// automatically generated by the FlatBuffers compiler, do not modify

package info

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type hallUser struct {
	_tab flatbuffers.Table
}

func GetRootAshallUser(buf []byte, offset flatbuffers.UOffsetT) *hallUser {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &hallUser{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *hallUser) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *hallUser) Money() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *hallUser) MutateMoney(n int32) bool {
	return rcv._tab.MutateInt32Slot(4, n)
}

func (rcv *hallUser) Score() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *hallUser) MutateScore(n int32) bool {
	return rcv._tab.MutateInt32Slot(6, n)
}

func (rcv *hallUser) Nickname() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *hallUser) Sex() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *hallUser) City() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *hallUser) Headimgurl() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *hallUser) Unionid() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *hallUser) Mobile() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *hallUser) Freescore() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *hallUser) MutateFreescore(n int32) bool {
	return rcv._tab.MutateInt32Slot(20, n)
}

func (rcv *hallUser) Usertype() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 1
}

func (rcv *hallUser) MutateUsertype(n uint32) bool {
	return rcv._tab.MutateUint32Slot(22, n)
}

func hallUserStart(builder *flatbuffers.Builder) {
	builder.StartObject(10)
}
func hallUserAddMoney(builder *flatbuffers.Builder, money int32) {
	builder.PrependInt32Slot(0, money, 0)
}
func hallUserAddScore(builder *flatbuffers.Builder, score int32) {
	builder.PrependInt32Slot(1, score, 0)
}
func hallUserAddNickname(builder *flatbuffers.Builder, nickname flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(nickname), 0)
}
func hallUserAddSex(builder *flatbuffers.Builder, sex flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(sex), 0)
}
func hallUserAddCity(builder *flatbuffers.Builder, city flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(city), 0)
}
func hallUserAddHeadimgurl(builder *flatbuffers.Builder, headimgurl flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(headimgurl), 0)
}
func hallUserAddUnionid(builder *flatbuffers.Builder, unionid flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(unionid), 0)
}
func hallUserAddMobile(builder *flatbuffers.Builder, mobile flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(7, flatbuffers.UOffsetT(mobile), 0)
}
func hallUserAddFreescore(builder *flatbuffers.Builder, freescore int32) {
	builder.PrependInt32Slot(8, freescore, 0)
}
func hallUserAddUsertype(builder *flatbuffers.Builder, usertype uint32) {
	builder.PrependUint32Slot(9, usertype, 1)
}
func hallUserEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
