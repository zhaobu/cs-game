// automatically generated by the FlatBuffers compiler, do not modify

package info

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type UniqueIdInfo struct {
	_tab flatbuffers.Table
}

func GetRootAsUniqueIdInfo(buf []byte, offset flatbuffers.UOffsetT) *UniqueIdInfo {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &UniqueIdInfo{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *UniqueIdInfo) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *UniqueIdInfo) Id() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *UniqueIdInfo) MutateId(n uint32) bool {
	return rcv._tab.MutateUint32Slot(4, n)
}

func (rcv *UniqueIdInfo) UniqueId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func UniqueIdInfoStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func UniqueIdInfoAddId(builder *flatbuffers.Builder, id uint32) {
	builder.PrependUint32Slot(0, id, 0)
}
func UniqueIdInfoAddUniqueId(builder *flatbuffers.Builder, uniqueId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(uniqueId), 0)
}
func UniqueIdInfoEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
