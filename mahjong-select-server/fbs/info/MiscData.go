// automatically generated by the FlatBuffers compiler, do not modify

package info

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type MiscData struct {
	_tab flatbuffers.Table
}

func GetRootAsMiscData(buf []byte, offset flatbuffers.UOffsetT) *MiscData {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &MiscData{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *MiscData) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *MiscData) ShareScoreBgImg() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *MiscData) IconUrl() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *MiscData) ShareGameStatus() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MiscData) MutateShareGameStatus(n int32) bool {
	return rcv._tab.MutateInt32Slot(8, n)
}

func (rcv *MiscData) WxShareImg() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *MiscData) Extra1() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *MiscData) Extra2() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *MiscData) Extra3() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *MiscData) Extra4() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *MiscData) Extra5() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *MiscData) Extra6() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *MiscData) Extra7() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *MiscData) Extra8() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *MiscData) Extra9() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *MiscData) Extra10() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *MiscData) Extra11() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *MiscData) Extra12() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(34))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *MiscData) Extra13() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(36))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *MiscData) Extra14() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(38))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *MiscData) Extra15() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(40))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *MiscData) Extra16() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(42))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *MiscData) Extra17() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(44))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *MiscData) Extra18() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(46))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *MiscData) Extra19() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(48))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *MiscData) Extra20() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(50))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func MiscDataStart(builder *flatbuffers.Builder) {
	builder.StartObject(24)
}
func MiscDataAddShareScoreBgImg(builder *flatbuffers.Builder, shareScoreBgImg flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(shareScoreBgImg), 0)
}
func MiscDataAddIconUrl(builder *flatbuffers.Builder, iconUrl flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(iconUrl), 0)
}
func MiscDataAddShareGameStatus(builder *flatbuffers.Builder, shareGameStatus int32) {
	builder.PrependInt32Slot(2, shareGameStatus, 0)
}
func MiscDataAddWxShareImg(builder *flatbuffers.Builder, wxShareImg flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(wxShareImg), 0)
}
func MiscDataAddExtra1(builder *flatbuffers.Builder, extra1 flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(extra1), 0)
}
func MiscDataAddExtra2(builder *flatbuffers.Builder, extra2 flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(extra2), 0)
}
func MiscDataAddExtra3(builder *flatbuffers.Builder, extra3 flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(extra3), 0)
}
func MiscDataAddExtra4(builder *flatbuffers.Builder, extra4 flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(7, flatbuffers.UOffsetT(extra4), 0)
}
func MiscDataAddExtra5(builder *flatbuffers.Builder, extra5 flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(8, flatbuffers.UOffsetT(extra5), 0)
}
func MiscDataAddExtra6(builder *flatbuffers.Builder, extra6 flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(9, flatbuffers.UOffsetT(extra6), 0)
}
func MiscDataAddExtra7(builder *flatbuffers.Builder, extra7 flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(10, flatbuffers.UOffsetT(extra7), 0)
}
func MiscDataAddExtra8(builder *flatbuffers.Builder, extra8 flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(11, flatbuffers.UOffsetT(extra8), 0)
}
func MiscDataAddExtra9(builder *flatbuffers.Builder, extra9 flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(12, flatbuffers.UOffsetT(extra9), 0)
}
func MiscDataAddExtra10(builder *flatbuffers.Builder, extra10 flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(13, flatbuffers.UOffsetT(extra10), 0)
}
func MiscDataAddExtra11(builder *flatbuffers.Builder, extra11 flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(14, flatbuffers.UOffsetT(extra11), 0)
}
func MiscDataAddExtra12(builder *flatbuffers.Builder, extra12 flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(15, flatbuffers.UOffsetT(extra12), 0)
}
func MiscDataAddExtra13(builder *flatbuffers.Builder, extra13 flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(16, flatbuffers.UOffsetT(extra13), 0)
}
func MiscDataAddExtra14(builder *flatbuffers.Builder, extra14 flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(17, flatbuffers.UOffsetT(extra14), 0)
}
func MiscDataAddExtra15(builder *flatbuffers.Builder, extra15 flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(18, flatbuffers.UOffsetT(extra15), 0)
}
func MiscDataAddExtra16(builder *flatbuffers.Builder, extra16 flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(19, flatbuffers.UOffsetT(extra16), 0)
}
func MiscDataAddExtra17(builder *flatbuffers.Builder, extra17 flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(20, flatbuffers.UOffsetT(extra17), 0)
}
func MiscDataAddExtra18(builder *flatbuffers.Builder, extra18 flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(21, flatbuffers.UOffsetT(extra18), 0)
}
func MiscDataAddExtra19(builder *flatbuffers.Builder, extra19 flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(22, flatbuffers.UOffsetT(extra19), 0)
}
func MiscDataAddExtra20(builder *flatbuffers.Builder, extra20 flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(23, flatbuffers.UOffsetT(extra20), 0)
}
func MiscDataEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
