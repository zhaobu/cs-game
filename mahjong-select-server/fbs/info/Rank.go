// automatically generated by the FlatBuffers compiler, do not modify

package info

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type Rank struct {
	_tab flatbuffers.Table
}

func GetRootAsRank(buf []byte, offset flatbuffers.UOffsetT) *Rank {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Rank{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *Rank) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Rank) Position() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Rank) MutatePosition(n int32) bool {
	return rcv._tab.MutateInt32Slot(4, n)
}

func (rcv *Rank) Icon() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Rank) Nickname() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Rank) RankInfo() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func RankStart(builder *flatbuffers.Builder) {
	builder.StartObject(4)
}
func RankAddPosition(builder *flatbuffers.Builder, position int32) {
	builder.PrependInt32Slot(0, position, 0)
}
func RankAddIcon(builder *flatbuffers.Builder, icon flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(icon), 0)
}
func RankAddNickname(builder *flatbuffers.Builder, nickname flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(nickname), 0)
}
func RankAddRankInfo(builder *flatbuffers.Builder, rankInfo flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(rankInfo), 0)
}
func RankEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
