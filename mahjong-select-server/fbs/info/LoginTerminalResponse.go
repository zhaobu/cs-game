// automatically generated by the FlatBuffers compiler, do not modify

package info

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type LoginTerminalResponse struct {
	_tab flatbuffers.Table
}

func GetRootAsLoginTerminalResponse(buf []byte, offset flatbuffers.UOffsetT) *LoginTerminalResponse {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &LoginTerminalResponse{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *LoginTerminalResponse) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *LoginTerminalResponse) Result(obj *CommonResult) *CommonResult {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(CommonResult)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *LoginTerminalResponse) UserId() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *LoginTerminalResponse) MutateUserId(n uint32) bool {
	return rcv._tab.MutateUint32Slot(6, n)
}

func (rcv *LoginTerminalResponse) Money() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *LoginTerminalResponse) MutateMoney(n int32) bool {
	return rcv._tab.MutateInt32Slot(8, n)
}

func (rcv *LoginTerminalResponse) Score() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *LoginTerminalResponse) MutateScore(n int32) bool {
	return rcv._tab.MutateInt32Slot(10, n)
}

func (rcv *LoginTerminalResponse) Token() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *LoginTerminalResponse) RoomId() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *LoginTerminalResponse) MutateRoomId(n uint32) bool {
	return rcv._tab.MutateUint32Slot(14, n)
}

func (rcv *LoginTerminalResponse) Ip() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *LoginTerminalResponse) Port() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *LoginTerminalResponse) MutatePort(n int32) bool {
	return rcv._tab.MutateInt32Slot(18, n)
}

func (rcv *LoginTerminalResponse) Userinfo(obj *UserInfo) *UserInfo {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(UserInfo)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func LoginTerminalResponseStart(builder *flatbuffers.Builder) {
	builder.StartObject(9)
}
func LoginTerminalResponseAddResult(builder *flatbuffers.Builder, result flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(result), 0)
}
func LoginTerminalResponseAddUserId(builder *flatbuffers.Builder, userId uint32) {
	builder.PrependUint32Slot(1, userId, 0)
}
func LoginTerminalResponseAddMoney(builder *flatbuffers.Builder, money int32) {
	builder.PrependInt32Slot(2, money, 0)
}
func LoginTerminalResponseAddScore(builder *flatbuffers.Builder, score int32) {
	builder.PrependInt32Slot(3, score, 0)
}
func LoginTerminalResponseAddToken(builder *flatbuffers.Builder, token flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(token), 0)
}
func LoginTerminalResponseAddRoomId(builder *flatbuffers.Builder, roomId uint32) {
	builder.PrependUint32Slot(5, roomId, 0)
}
func LoginTerminalResponseAddIp(builder *flatbuffers.Builder, ip flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(ip), 0)
}
func LoginTerminalResponseAddPort(builder *flatbuffers.Builder, port int32) {
	builder.PrependInt32Slot(7, port, 0)
}
func LoginTerminalResponseAddUserinfo(builder *flatbuffers.Builder, userinfo flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(8, flatbuffers.UOffsetT(userinfo), 0)
}
func LoginTerminalResponseEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
