// automatically generated by the FlatBuffers compiler, do not modify

package info

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type CoinProduct struct {
	_tab flatbuffers.Table
}

func GetRootAsCoinProduct(buf []byte, offset flatbuffers.UOffsetT) *CoinProduct {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &CoinProduct{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *CoinProduct) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *CoinProduct) Id() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *CoinProduct) MutateId(n int32) bool {
	return rcv._tab.MutateInt32Slot(4, n)
}

func (rcv *CoinProduct) ProductName() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *CoinProduct) Price() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *CoinProduct) MutatePrice(n uint32) bool {
	return rcv._tab.MutateUint32Slot(8, n)
}

func (rcv *CoinProduct) Coins() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *CoinProduct) MutateCoins(n uint32) bool {
	return rcv._tab.MutateUint32Slot(10, n)
}

func (rcv *CoinProduct) Discount() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func CoinProductStart(builder *flatbuffers.Builder) {
	builder.StartObject(5)
}
func CoinProductAddId(builder *flatbuffers.Builder, id int32) {
	builder.PrependInt32Slot(0, id, 0)
}
func CoinProductAddProductName(builder *flatbuffers.Builder, productName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(productName), 0)
}
func CoinProductAddPrice(builder *flatbuffers.Builder, price uint32) {
	builder.PrependUint32Slot(2, price, 0)
}
func CoinProductAddCoins(builder *flatbuffers.Builder, coins uint32) {
	builder.PrependUint32Slot(3, coins, 0)
}
func CoinProductAddDiscount(builder *flatbuffers.Builder, discount flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(discount), 0)
}
func CoinProductEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
