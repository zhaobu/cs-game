// automatically generated by the FlatBuffers compiler, do not modify

package info

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type NewRoomInfo struct {
	_tab flatbuffers.Table
}

func GetRootAsNewRoomInfo(buf []byte, offset flatbuffers.UOffsetT) *NewRoomInfo {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &NewRoomInfo{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *NewRoomInfo) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *NewRoomInfo) RecordId() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *NewRoomInfo) MutateRecordId(n int32) bool {
	return rcv._tab.MutateInt32Slot(4, n)
}

func (rcv *NewRoomInfo) RoomNum() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *NewRoomInfo) CreateTime() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *NewRoomInfo) GameType() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *NewRoomInfo) MasterId() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *NewRoomInfo) MutateMasterId(n uint32) bool {
	return rcv._tab.MutateUint32Slot(12, n)
}

func (rcv *NewRoomInfo) Users(obj *PlayerInfo, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		if obj == nil {
			obj = new(PlayerInfo)
		}
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *NewRoomInfo) UsersLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func NewRoomInfoStart(builder *flatbuffers.Builder) {
	builder.StartObject(6)
}
func NewRoomInfoAddRecordId(builder *flatbuffers.Builder, recordId int32) {
	builder.PrependInt32Slot(0, recordId, 0)
}
func NewRoomInfoAddRoomNum(builder *flatbuffers.Builder, roomNum flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(roomNum), 0)
}
func NewRoomInfoAddCreateTime(builder *flatbuffers.Builder, createTime flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(createTime), 0)
}
func NewRoomInfoAddGameType(builder *flatbuffers.Builder, gameType flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(gameType), 0)
}
func NewRoomInfoAddMasterId(builder *flatbuffers.Builder, masterId uint32) {
	builder.PrependUint32Slot(4, masterId, 0)
}
func NewRoomInfoAddUsers(builder *flatbuffers.Builder, users flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(users), 0)
}
func NewRoomInfoStartUsersVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func NewRoomInfoEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
