// automatically generated by the FlatBuffers compiler, do not modify

package info

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type ClubRoomInfo struct {
	_tab flatbuffers.Table
}

func GetRootAsClubRoomInfo(buf []byte, offset flatbuffers.UOffsetT) *ClubRoomInfo {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &ClubRoomInfo{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *ClubRoomInfo) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *ClubRoomInfo) RoomId() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ClubRoomInfo) MutateRoomId(n uint32) bool {
	return rcv._tab.MutateUint32Slot(4, n)
}

func (rcv *ClubRoomInfo) CreateUser() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ClubRoomInfo) MutateCreateUser(n uint32) bool {
	return rcv._tab.MutateUint32Slot(6, n)
}

func (rcv *ClubRoomInfo) CreaterIcon() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *ClubRoomInfo) CreaterScore() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ClubRoomInfo) MutateCreaterScore(n int32) bool {
	return rcv._tab.MutateInt32Slot(10, n)
}

func (rcv *ClubRoomInfo) RoomNum() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ClubRoomInfo) MutateRoomNum(n uint32) bool {
	return rcv._tab.MutateUint32Slot(12, n)
}

func (rcv *ClubRoomInfo) MahjongType() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *ClubRoomInfo) Setting() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *ClubRoomInfo) PlayerCount() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ClubRoomInfo) MutatePlayerCount(n uint32) bool {
	return rcv._tab.MutateUint32Slot(18, n)
}

func (rcv *ClubRoomInfo) TotalRounds() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ClubRoomInfo) MutateTotalRounds(n uint32) bool {
	return rcv._tab.MutateUint32Slot(20, n)
}

func (rcv *ClubRoomInfo) CreateTime() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *ClubRoomInfo) Players(obj *ClubPlayerInfo, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		if obj == nil {
			obj = new(ClubPlayerInfo)
		}
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *ClubRoomInfo) PlayersLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func ClubRoomInfoStart(builder *flatbuffers.Builder) {
	builder.StartObject(11)
}
func ClubRoomInfoAddRoomId(builder *flatbuffers.Builder, roomId uint32) {
	builder.PrependUint32Slot(0, roomId, 0)
}
func ClubRoomInfoAddCreateUser(builder *flatbuffers.Builder, createUser uint32) {
	builder.PrependUint32Slot(1, createUser, 0)
}
func ClubRoomInfoAddCreaterIcon(builder *flatbuffers.Builder, createrIcon flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(createrIcon), 0)
}
func ClubRoomInfoAddCreaterScore(builder *flatbuffers.Builder, createrScore int32) {
	builder.PrependInt32Slot(3, createrScore, 0)
}
func ClubRoomInfoAddRoomNum(builder *flatbuffers.Builder, roomNum uint32) {
	builder.PrependUint32Slot(4, roomNum, 0)
}
func ClubRoomInfoAddMahjongType(builder *flatbuffers.Builder, mahjongType flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(mahjongType), 0)
}
func ClubRoomInfoAddSetting(builder *flatbuffers.Builder, setting flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(setting), 0)
}
func ClubRoomInfoAddPlayerCount(builder *flatbuffers.Builder, playerCount uint32) {
	builder.PrependUint32Slot(7, playerCount, 0)
}
func ClubRoomInfoAddTotalRounds(builder *flatbuffers.Builder, totalRounds uint32) {
	builder.PrependUint32Slot(8, totalRounds, 0)
}
func ClubRoomInfoAddCreateTime(builder *flatbuffers.Builder, createTime flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(9, flatbuffers.UOffsetT(createTime), 0)
}
func ClubRoomInfoAddPlayers(builder *flatbuffers.Builder, players flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(10, flatbuffers.UOffsetT(players), 0)
}
func ClubRoomInfoStartPlayersVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func ClubRoomInfoEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
