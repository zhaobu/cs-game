// automatically generated by the FlatBuffers compiler, do not modify

package Common

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type ResultInfo_v_2_3_0 struct {
	_tab flatbuffers.Table
}

func GetRootAsResultInfo_v_2_3_0(buf []byte, offset flatbuffers.UOffsetT) *ResultInfo_v_2_3_0 {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &ResultInfo_v_2_3_0{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *ResultInfo_v_2_3_0) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *ResultInfo_v_2_3_0) UserId() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ResultInfo_v_2_3_0) MutateUserId(n uint32) bool {
	return rcv._tab.MutateUint32Slot(4, n)
}

func (rcv *ResultInfo_v_2_3_0) Nickname() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *ResultInfo_v_2_3_0) Avatar() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *ResultInfo_v_2_3_0) KitchenTimes() uint16 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetUint16(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ResultInfo_v_2_3_0) MutateKitchenTimes(n uint16) bool {
	return rcv._tab.MutateUint16Slot(10, n)
}

func (rcv *ResultInfo_v_2_3_0) DianPaoTimes() uint16 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetUint16(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ResultInfo_v_2_3_0) MutateDianPaoTimes(n uint16) bool {
	return rcv._tab.MutateUint16Slot(12, n)
}

func (rcv *ResultInfo_v_2_3_0) Score() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ResultInfo_v_2_3_0) MutateScore(n int32) bool {
	return rcv._tab.MutateInt32Slot(14, n)
}

func (rcv *ResultInfo_v_2_3_0) TotalScore() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ResultInfo_v_2_3_0) MutateTotalScore(n int32) bool {
	return rcv._tab.MutateInt32Slot(16, n)
}

func (rcv *ResultInfo_v_2_3_0) KongTimes() uint16 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.GetUint16(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ResultInfo_v_2_3_0) MutateKongTimes(n uint16) bool {
	return rcv._tab.MutateUint16Slot(18, n)
}

func (rcv *ResultInfo_v_2_3_0) KongDarkTimes() uint16 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.GetUint16(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ResultInfo_v_2_3_0) MutateKongDarkTimes(n uint16) bool {
	return rcv._tab.MutateUint16Slot(20, n)
}

func (rcv *ResultInfo_v_2_3_0) KongTurnTimes() uint16 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.GetUint16(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ResultInfo_v_2_3_0) MutateKongTurnTimes(n uint16) bool {
	return rcv._tab.MutateUint16Slot(22, n)
}

func (rcv *ResultInfo_v_2_3_0) KongTurnFreeTimes() uint16 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.GetUint16(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ResultInfo_v_2_3_0) MutateKongTurnFreeTimes(n uint16) bool {
	return rcv._tab.MutateUint16Slot(24, n)
}

func (rcv *ResultInfo_v_2_3_0) WinSelfTimes() uint16 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.GetUint16(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ResultInfo_v_2_3_0) MutateWinSelfTimes(n uint16) bool {
	return rcv._tab.MutateUint16Slot(26, n)
}

func (rcv *ResultInfo_v_2_3_0) WinTimes() uint16 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return rcv._tab.GetUint16(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ResultInfo_v_2_3_0) MutateWinTimes(n uint16) bool {
	return rcv._tab.MutateUint16Slot(28, n)
}

func ResultInfo_v_2_3_0Start(builder *flatbuffers.Builder) {
	builder.StartObject(13)
}
func ResultInfo_v_2_3_0AddUserId(builder *flatbuffers.Builder, userId uint32) {
	builder.PrependUint32Slot(0, userId, 0)
}
func ResultInfo_v_2_3_0AddNickname(builder *flatbuffers.Builder, nickname flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(nickname), 0)
}
func ResultInfo_v_2_3_0AddAvatar(builder *flatbuffers.Builder, avatar flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(avatar), 0)
}
func ResultInfo_v_2_3_0AddKitchenTimes(builder *flatbuffers.Builder, KitchenTimes uint16) {
	builder.PrependUint16Slot(3, KitchenTimes, 0)
}
func ResultInfo_v_2_3_0AddDianPaoTimes(builder *flatbuffers.Builder, dianPaoTimes uint16) {
	builder.PrependUint16Slot(4, dianPaoTimes, 0)
}
func ResultInfo_v_2_3_0AddScore(builder *flatbuffers.Builder, score int32) {
	builder.PrependInt32Slot(5, score, 0)
}
func ResultInfo_v_2_3_0AddTotalScore(builder *flatbuffers.Builder, totalScore int32) {
	builder.PrependInt32Slot(6, totalScore, 0)
}
func ResultInfo_v_2_3_0AddKongTimes(builder *flatbuffers.Builder, KongTimes uint16) {
	builder.PrependUint16Slot(7, KongTimes, 0)
}
func ResultInfo_v_2_3_0AddKongDarkTimes(builder *flatbuffers.Builder, KongDarkTimes uint16) {
	builder.PrependUint16Slot(8, KongDarkTimes, 0)
}
func ResultInfo_v_2_3_0AddKongTurnTimes(builder *flatbuffers.Builder, KongTurnTimes uint16) {
	builder.PrependUint16Slot(9, KongTurnTimes, 0)
}
func ResultInfo_v_2_3_0AddKongTurnFreeTimes(builder *flatbuffers.Builder, KongTurnFreeTimes uint16) {
	builder.PrependUint16Slot(10, KongTurnFreeTimes, 0)
}
func ResultInfo_v_2_3_0AddWinSelfTimes(builder *flatbuffers.Builder, WinSelfTimes uint16) {
	builder.PrependUint16Slot(11, WinSelfTimes, 0)
}
func ResultInfo_v_2_3_0AddWinTimes(builder *flatbuffers.Builder, WinTimes uint16) {
	builder.PrependUint16Slot(12, WinTimes, 0)
}
func ResultInfo_v_2_3_0End(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
