// automatically generated by the FlatBuffers compiler, do not modify

package Common

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type LeagueGameStartPush struct {
	_tab flatbuffers.Table
}

func GetRootAsLeagueGameStartPush(buf []byte, offset flatbuffers.UOffsetT) *LeagueGameStartPush {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &LeagueGameStartPush{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *LeagueGameStartPush) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *LeagueGameStartPush) RaceId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *LeagueGameStartPush) MutateRaceId(n int64) bool {
	return rcv._tab.MutateInt64Slot(4, n)
}

func (rcv *LeagueGameStartPush) RoomId() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *LeagueGameStartPush) MutateRoomId(n uint64) bool {
	return rcv._tab.MutateUint64Slot(6, n)
}

func (rcv *LeagueGameStartPush) Remote() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func LeagueGameStartPushStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func LeagueGameStartPushAddRaceId(builder *flatbuffers.Builder, raceId int64) {
	builder.PrependInt64Slot(0, raceId, 0)
}
func LeagueGameStartPushAddRoomId(builder *flatbuffers.Builder, roomId uint64) {
	builder.PrependUint64Slot(1, roomId, 0)
}
func LeagueGameStartPushAddRemote(builder *flatbuffers.Builder, remote flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(remote), 0)
}
func LeagueGameStartPushEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
