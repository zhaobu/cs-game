// automatically generated by the FlatBuffers compiler, do not modify

package Common

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type QuitRoomPush struct {
	_tab flatbuffers.Table
}

func GetRootAsQuitRoomPush(buf []byte, offset flatbuffers.UOffsetT) *QuitRoomPush {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &QuitRoomPush{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *QuitRoomPush) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *QuitRoomPush) UserId() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *QuitRoomPush) MutateUserId(n uint32) bool {
	return rcv._tab.MutateUint32Slot(4, n)
}

func (rcv *QuitRoomPush) Index() byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetByte(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *QuitRoomPush) MutateIndex(n byte) bool {
	return rcv._tab.MutateByteSlot(6, n)
}

func (rcv *QuitRoomPush) Code() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *QuitRoomPush) MutateCode(n int32) bool {
	return rcv._tab.MutateInt32Slot(8, n)
}

func QuitRoomPushStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func QuitRoomPushAddUserId(builder *flatbuffers.Builder, userId uint32) {
	builder.PrependUint32Slot(0, userId, 0)
}
func QuitRoomPushAddIndex(builder *flatbuffers.Builder, index byte) {
	builder.PrependByteSlot(1, index, 0)
}
func QuitRoomPushAddCode(builder *flatbuffers.Builder, code int32) {
	builder.PrependInt32Slot(2, code, 0)
}
func QuitRoomPushEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
