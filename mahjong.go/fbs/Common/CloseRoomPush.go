// automatically generated by the FlatBuffers compiler, do not modify

package Common

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type CloseRoomPush struct {
	_tab flatbuffers.Table
}

func GetRootAsCloseRoomPush(buf []byte, offset flatbuffers.UOffsetT) *CloseRoomPush {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &CloseRoomPush{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *CloseRoomPush) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *CloseRoomPush) Code() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *CloseRoomPush) MutateCode(n int32) bool {
	return rcv._tab.MutateInt32Slot(4, n)
}

func (rcv *CloseRoomPush) Msg() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func CloseRoomPushStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func CloseRoomPushAddCode(builder *flatbuffers.Builder, code int32) {
	builder.PrependInt32Slot(0, code, 0)
}
func CloseRoomPushAddMsg(builder *flatbuffers.Builder, msg flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(msg), 0)
}
func CloseRoomPushEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
