// automatically generated by the FlatBuffers compiler, do not modify

package Common

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type RoomChatNotify struct {
	_tab flatbuffers.Table
}

func GetRootAsRoomChatNotify(buf []byte, offset flatbuffers.UOffsetT) *RoomChatNotify {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &RoomChatNotify{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *RoomChatNotify) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *RoomChatNotify) ChatId() int16 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt16(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *RoomChatNotify) MutateChatId(n int16) bool {
	return rcv._tab.MutateInt16Slot(4, n)
}

func (rcv *RoomChatNotify) MemberId() byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetByte(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *RoomChatNotify) MutateMemberId(n byte) bool {
	return rcv._tab.MutateByteSlot(6, n)
}

func (rcv *RoomChatNotify) Content() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func RoomChatNotifyStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func RoomChatNotifyAddChatId(builder *flatbuffers.Builder, chatId int16) {
	builder.PrependInt16Slot(0, chatId, 0)
}
func RoomChatNotifyAddMemberId(builder *flatbuffers.Builder, memberId byte) {
	builder.PrependByteSlot(1, memberId, 0)
}
func RoomChatNotifyAddContent(builder *flatbuffers.Builder, content flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(content), 0)
}
func RoomChatNotifyEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
