// automatically generated by the FlatBuffers compiler, do not modify

package Common

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type LeagueS2LPlanPush struct {
	_tab flatbuffers.Table
}

func GetRootAsLeagueS2LPlanPush(buf []byte, offset flatbuffers.UOffsetT) *LeagueS2LPlanPush {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &LeagueS2LPlanPush{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *LeagueS2LPlanPush) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *LeagueS2LPlanPush) S2cResult(obj *GameResult) *GameResult {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(GameResult)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *LeagueS2LPlanPush) RaceRoomId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *LeagueS2LPlanPush) MutateRaceRoomId(n int64) bool {
	return rcv._tab.MutateInt64Slot(6, n)
}

func (rcv *LeagueS2LPlanPush) RoomId() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *LeagueS2LPlanPush) MutateRoomId(n uint64) bool {
	return rcv._tab.MutateUint64Slot(8, n)
}

func (rcv *LeagueS2LPlanPush) RaceId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *LeagueS2LPlanPush) MutateRaceId(n int64) bool {
	return rcv._tab.MutateInt64Slot(10, n)
}

func LeagueS2LPlanPushStart(builder *flatbuffers.Builder) {
	builder.StartObject(4)
}
func LeagueS2LPlanPushAddS2cResult(builder *flatbuffers.Builder, s2cResult flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(s2cResult), 0)
}
func LeagueS2LPlanPushAddRaceRoomId(builder *flatbuffers.Builder, raceRoomId int64) {
	builder.PrependInt64Slot(1, raceRoomId, 0)
}
func LeagueS2LPlanPushAddRoomId(builder *flatbuffers.Builder, roomId uint64) {
	builder.PrependUint64Slot(2, roomId, 0)
}
func LeagueS2LPlanPushAddRaceId(builder *flatbuffers.Builder, raceId int64) {
	builder.PrependInt64Slot(3, raceId, 0)
}
func LeagueS2LPlanPushEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
