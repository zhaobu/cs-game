// automatically generated by the FlatBuffers compiler, do not modify

package Common

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type RoomUserInfo struct {
	_tab flatbuffers.Table
}

func GetRootAsRoomUserInfo(buf []byte, offset flatbuffers.UOffsetT) *RoomUserInfo {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &RoomUserInfo{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *RoomUserInfo) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *RoomUserInfo) UserId() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *RoomUserInfo) MutateUserId(n uint32) bool {
	return rcv._tab.MutateUint32Slot(4, n)
}

func (rcv *RoomUserInfo) Index() byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetByte(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *RoomUserInfo) MutateIndex(n byte) bool {
	return rcv._tab.MutateByteSlot(6, n)
}

func (rcv *RoomUserInfo) Nickname() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *RoomUserInfo) Avatar() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *RoomUserInfo) Ip() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *RoomUserInfo) Area() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *RoomUserInfo) Online() byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetByte(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *RoomUserInfo) MutateOnline(n byte) bool {
	return rcv._tab.MutateByteSlot(16, n)
}

func (rcv *RoomUserInfo) IsHost() byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.GetByte(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *RoomUserInfo) MutateIsHost(n byte) bool {
	return rcv._tab.MutateByteSlot(18, n)
}

func (rcv *RoomUserInfo) Score() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *RoomUserInfo) MutateScore(n int32) bool {
	return rcv._tab.MutateInt32Slot(20, n)
}

func (rcv *RoomUserInfo) Gender() byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.GetByte(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *RoomUserInfo) MutateGender(n byte) bool {
	return rcv._tab.MutateByteSlot(22, n)
}

func (rcv *RoomUserInfo) Money() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *RoomUserInfo) MutateMoney(n int32) bool {
	return rcv._tab.MutateInt32Slot(24, n)
}

func (rcv *RoomUserInfo) AvatarBox() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *RoomUserInfo) MutateAvatarBox(n int32) bool {
	return rcv._tab.MutateInt32Slot(26, n)
}

func RoomUserInfoStart(builder *flatbuffers.Builder) {
	builder.StartObject(12)
}
func RoomUserInfoAddUserId(builder *flatbuffers.Builder, userId uint32) {
	builder.PrependUint32Slot(0, userId, 0)
}
func RoomUserInfoAddIndex(builder *flatbuffers.Builder, index byte) {
	builder.PrependByteSlot(1, index, 0)
}
func RoomUserInfoAddNickname(builder *flatbuffers.Builder, nickname flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(nickname), 0)
}
func RoomUserInfoAddAvatar(builder *flatbuffers.Builder, avatar flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(avatar), 0)
}
func RoomUserInfoAddIp(builder *flatbuffers.Builder, ip flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(ip), 0)
}
func RoomUserInfoAddArea(builder *flatbuffers.Builder, area flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(area), 0)
}
func RoomUserInfoAddOnline(builder *flatbuffers.Builder, online byte) {
	builder.PrependByteSlot(6, online, 0)
}
func RoomUserInfoAddIsHost(builder *flatbuffers.Builder, isHost byte) {
	builder.PrependByteSlot(7, isHost, 0)
}
func RoomUserInfoAddScore(builder *flatbuffers.Builder, score int32) {
	builder.PrependInt32Slot(8, score, 0)
}
func RoomUserInfoAddGender(builder *flatbuffers.Builder, gender byte) {
	builder.PrependByteSlot(9, gender, 0)
}
func RoomUserInfoAddMoney(builder *flatbuffers.Builder, money int32) {
	builder.PrependInt32Slot(10, money, 0)
}
func RoomUserInfoAddAvatarBox(builder *flatbuffers.Builder, avatarBox int32) {
	builder.PrependInt32Slot(11, avatarBox, 0)
}
func RoomUserInfoEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
