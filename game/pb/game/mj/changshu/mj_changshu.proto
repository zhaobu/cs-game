syntax = "proto3";

import "cy/game/pb/common/common.proto";
import "cy/game/pb/game/game.proto";

package pbgame_mj_changshu;

message cyU32String {
  uint32 Val = 1;
  string Name = 2;
}

message RoundInfo {
  uint32 LoopCnt = 1;  // 局数 8 16
  uint32 Fee = 2;      // 个人费用 1 2
}

// 创建房间参数
message CreateArg {
  repeated cyU32String Rule = 1;
  uint32 Barhead = 2;
  int32 PlayerCount = 3;
  uint32 Dipiao = 4;
  RoundInfo RInfo = 5;
  uint32 PaymentType = 6;
  uint32 Voice = 7;
  uint32 LimitIP = 8;
}

// 创建房间参数模板
message CreateArgTpl {
  // 玩法  1 二摸三冲 2 豹子翻倍
  repeated cyU32String Rule = 1;
  // 杠头 0 不选 1 扳4个 2 扳8个 3 独龙杠
  repeated cyU32String Barhead = 2;
  // 人数 2人 3人 4人
  repeated cyU32String PlayerCount = 3;
  // 底飘 0 ~ 10
  repeated cyU32String Dipiao = 4;
  // 局数
  repeated RoundInfo RInfo = 5;
  // 支付方式 1 房主支付 2 AA支付
  repeated cyU32String PaymentType = 6;
  // 语音 1 普通场 2 语音场
  repeated cyU32String Voice = 7;
  // IP以及位置限制 1 都不选 2 IP以及位置限制 3 IP以及位置限制+强制定位
  uint32 LimitIP = 8;
  // 默认参数
  CreateArg Def = 9;
}

// 桌子参数
message DeskArg {
  CreateArg args = 1;          //创建房间参数
  bool Enable = 2;             //能否建房
  pbcommon.DeskType Type = 3;  //桌子类型
  pbgame.FeeType FeeType = 4;  //房费类型
  uint64 DeskID = 5;           //桌子号
  uint32 RoomId = 6;           //匹配场时才有用
  string RoomName = 7;         //匹配场时才有用
}

//游戏状态
enum GameStatus {
  GSNone = 0;
  GSWait = 1;  //等待中(第一局为1个或多个点坐下,第二局后为一个或多个点下一局)
  GSDice = 2;  //打色子
  GSPlaying = 3;  //游戏中
  GSGameEnd = 4;  //游戏结束,没有人准备好下一局
}

message cyint32 {
  int32 T = 1;
}

///////////////////////////c-s///////////////////////////
// 投色子
message C2SThrowDice {
}

// 出牌
message C2SOutCard {
  int32 card = 1;
}

//碰牌
message C2SPengCard {
  int32 card = 1;
}

//杠牌
message C2SGangCard {
  int32 card = 1;
}

//吃牌
message C2SChiCard {
  int32 card = 1;       //上家打出的牌
  uint32 chi_type = 2;  //吃牌类型
}

//胡牌
message C2SHuCard {
}

//取消操作
message C2SCancelAction {
}

//准备下一局
message C2SGetReady {
}

//查询战绩
message C2SGetGameRecord {
}

///////////////////////////s-c///////////////////////////
message Json_Listen {
  message onecard {
    int32 card = 1;  //能听的牌
    int32 num = 2;   //剩余的数量
  }
  message cards {
    repeated onecard cards = 1;  //所有能听的牌
  }
  map<int32, cards> info = 1;  //听牌信息key表示打出的牌,value表示可以听的牌
}

// 听牌结果
message S2CListenCards {
  string listen_result = 1;  //听牌信息(按照Json_Listen解析)
}
//玩家准备下一局
message BS2CGetReady {
  uint64 userId = 1;  //准备玩家
}

//更改状态
message BS2CUpdateGameStatus {
  GameStatus game_status = 1;  //当前游戏状态
}

//通知玩家投色子
message S2CThrowDice {
  int32 chair_id = 1;  //当前投色子玩家
}

//玩家投色子结果
message BS2CThrowDiceResult {
  int32 chair_id = 1;               //当前投色子玩家
  repeated cyint32 dice_value = 2;  //色子大小
}

message ChangePosInfo {
  int32 user_pos = 1;  //玩家最终方位(1:东2:南3:西4:北)
  uint64 userId = 2;
}

//换位结果
message S2CChangePos {
  repeated ChangePosInfo pos_info = 1;  //换位结果
}

enum CanOperMask {
  OperMaskNone = 0;
  OperMaskChi = 1;   //吃标记
  OperMaskPeng = 2;  //碰标记
  OperMaskGang = 4;  //杠标记
  OperMaskHu = 8;    //胡标记
}

enum ChiTypeMask {
  ChiMaskNone = 0;
  ChiMaskLeft = 1;    //左吃(11,12,13,其中11为被吃的牌)
  ChiMaskMiddle = 2;  //中吃(11,12,13,其中12为被吃的牌)
  ChiMaskRight = 4;   //右吃(11,12,13,其中13为被吃的牌)
}

//玩家该轮的操作
message S2CHaveOperation {
  uint32 oper_mask = 1;           //操作的掩码
  int32 chair_id = 2;             //能操作的玩家
  int32 card = 3;                 //吃碰的牌
  uint32 can_chi = 4;             //能吃的类型
  repeated cyint32 can_gang = 5;  //所有能杠的牌
}

message Json_UserCardInfo {
  message cards {
    repeated int32 cards = 1;  //一个人的手牌
  }
  map<int32, cards> hand_cards = 1;  //每个人的手牌
}

//游戏开始
message S2CStartGame {
  int32 banker_id = 1;             //庄家id(也表示第一个可操作玩家)
  int32 left_num = 2;              //剩余牌数
  int32 total_num = 3;             //总牌数
  uint32 cur_inning = 4;           //当前局
  repeated cyint32 hua_cards = 5;  //庄家花牌
  repeated cyint32 dice_value = 6;   //摸牌色子
  int32 left_time = 7;               //超时时间
  S2CHaveOperation banker_oper = 8;  //庄家能做的操作
  string json_all_cards = 9;  //所有玩家手牌,(按Json_UserCardInfo格式解析)
}

//第一次补花信息
message Json_FirstBuHua {
  repeated int32 hua_cards = 1;  //所有的花牌(包括手牌原有的花和补到的花)
  repeated int32 mo_cards = 2;  //摸到的所有牌
  int32 mo_count = 3;           //总共摸牌的次数
}

//玩家摸牌
message BS2CDrawCard {
  int32 chair_id = 1;         //摸牌玩家
  int32 left_num = 2;         //剩余张数
  int32 draw_pos = 3;         // 0从牌前摸,1从摸牌尾
  string json_draw_info = 4;  //摸牌信息(按Json_FirstBuHua格式解析)
}

//玩家第一次补花(玩家还未进行第一次补花,可以进行吃碰,吃碰后进行第一次补花)
message BS2CFirstBuHua {
  int32 chair_id = 1;           //补花玩家
  int32 left_num = 2;           //剩余张数
  string json_first_buhua = 3;  //第一次补花信息(按Json_FirstBuHua格式解析)
}

//玩家出牌
message BS2COutCard {
  int32 chair_id = 1;  //出牌玩家
  int32 card = 2;      //出的牌
}

//玩家碰牌
message BS2CPengCard {
  int32 chair_id = 1;    //碰牌玩家
  int32 card = 2;        //要碰的牌
  int32 lose_chair = 3;  //被碰玩家,碰不同玩家,客户端显示不同
}

enum GangType {
  GangType_None = 0;
  GangType_Bu = 1;    //补杠
  GangType_AN = 2;    //暗杠
  GangType_Ming = 3;  //明杠
}
//玩家杠牌
message BS2CGangCard {
  int32 chair_id = 1;  //杠牌玩家
  int32 card = 2;      //要杠的牌
  GangType type = 3;
  //放杠的玩家,暗杠为-1,补杠时为碰牌时被碰玩家,明杠时为出牌玩家
  int32 lose_chair = 4;
}

//玩家吃牌
message BS2CChiCard {
  int32 chair_id = 1;   //吃牌玩家
  int32 card = 2;       //要吃的牌
  uint32 chi_type = 3;  //吃类型掩码
}

//玩家胡牌
message BS2CHuCard {
  int32 chair_id = 1;  //胡牌玩家
  int32 hu_card = 2;   //胡的牌
}

//胡牌类型
enum HuType {
  HuType_None = 0;
  HuType_Normal = 1;           //平胡
  HuType_ShiSanYao = 2;        //十三幺
  HuType_XiaoQiDui = 3;        //小七对
  HuType_MenQing = 4;          //门清
  HuType_QingYiSe = 5;         //清一色
  HuType_ZiYiSe = 6;           //字一色
  HuType_HunYiSe = 7;          //混一色
  HuType_DuiDuiHu = 8;         //对对胡
  HuType_GangShangKaiHua = 9;  //杠上开花
  HuType_DaDiaoChe = 10;       //大吊车
  HuType_HaiDiLaoYue = 11;     //海底捞月
  HuType_QiangGangHu = 12;     //抢杠胡
  HuType_GangShangPao = 13;    //杠上炮
}

enum HuMode {
  HuModeNone = 0;     //没胡
  HuModeZiMo = 1;     //自摸
  HuModeDianPao = 2;  //点炮
  HuModeJiePao = 3;   //接炮
}

enum ScoreType {
  ScoreNone = 0;
  ScoreBaoZi = 1;    //豹子翻倍
  ScoreHuPai = 2;    //胡牌分
  ScoreHua = 3;      //花牌分
  ScorePaiXing = 4;  //牌型分
  ScoreJiangMa = 5;  //奖码
  ScoreFeng = 6;     //风花
  ScoreDiPiao = 7;   //底飘
  ScoreGangHua = 8;  //杠花
}

message Json_PlayerBalance {
  message Info {
    repeated HuType hu_type = 1;  //胡牌类型
    map<int32, int32> score_type = 2;  //得分类型(key为ScoreType,value表示得分)
    repeated int32 hand_cards = 3;     //手牌(胡的牌在最后一张)
    repeated int32 hua_cards = 4;      //所有花牌
    int32 point = 5;                   //当局获得分数
    int32 total_point = 6;             //玩家当前总分数
    HuMode hu_mode = 7;                //胡牌方式
    repeated int32 ban_all_cards = 8;  //扳到的所有的牌
    repeated int32 ban_hit_index = 9;  //奖码牌的索引
  }
  repeated Info player_balance_info = 1;
}

enum GameEndType {
  EndNone = 0;
  EndHu = 1;        //胡了
  EndDeuce = 2;     //流局
  EndDissmiss = 3;  //解散
}
//单局游戏结束
message BS2CGameEnd {
  uint32 cur_inning = 1;  //当前局数
  int32 banker = 2;       //庄家id
  string json_player_balance = 3;  //玩家当局结算信息(以Json_PlayerBalance解析)
  GameEndType end_type = 4;  //游戏结束类型
  int32 dulong_card = 5;     //独龙杠
}

message GameRecordUserName {
  int32 chair_id = 1;  //座位号
  string name = 2;     //昵称
}

message GameRecordRank {
  int32 win_times = 1;    //胜局
  int32 chair_id = 2;     //座位号
  int32 total_score = 3;  //累计总分
}

message Json_GameRecord {
  message InningInfo {
    map<int32, int32> score = 1;  //本局分数(key:座位号,value:分数)
  }
  repeated InningInfo user_score = 1;  //玩家本局得分
}

//战绩记录
message S2CGameRecord {
  uint32 total_inning = 2;                //当前对局总数
  repeated GameRecordRank rank_info = 3;  //总分排行(降序排列)
  string json_record_info = 4;  //战绩流水(按照Json_GameRecord解析)
}

enum OperType {
  Oper_None = 0;
  Oper_BU_GANG = 1;    //补杠
  Oper_AN_GANG = 2;    //暗杠
  Oper_MING_GANG = 3;  //明杠
  Oper_PENG = 4;       //碰
  Oper_LCHI = 5;       //左吃
  Oper_MCHI = 6;       //中吃
  Oper_RCHI = 7;       //右吃
}

message Json_PlayerCard {
  repeated int32 hand_cards = 1;  //手牌
  repeated int32 out_cards = 2;  //出過的牌(不包括被碰，杠，吃掉的牌)
  repeated int32 hua_cards = 3;  //花牌
}

message OperRecord {
  OperType type = 1;     //操作类型
  int32 card = 2;        //操作的牌
  int32 lose_chair = 3;  //操作来源玩家
}

// 玩家信息 s -> c
message DeskUserInfo {
  pbcommon.UserInfo info = 1;             //玩家基本信息
  int32 chair_id = 2;                     //座位号
  pbgame.UserDeskStatus user_status = 3;  //玩家状态
  int32 card_num = 4;                     //牌数
  int32 point = 5;                        //当前分数
  string json_card_info = 6;  //手牌信息(按Json_PlayerCard解析)
  repeated OperRecord record_cards = 7;  //操作记录
  int32 dice_value = 8;                  //打色子结果
}

// 断线重连、进入桌子 桌子信息 s -> c
message GameDeskInfo {
  string game_name = 1;        // 游戏名称
  DeskArg arg = 2;             //桌子参数
  GameStatus game_status = 3;  //桌子状态
  //准备的玩家信息(数组索引和chair_id不一定相同)
  repeated DeskUserInfo game_user = 4;
  uint32 cur_inning = 5;                   //当前局数
  int32 banker_id = 6;                     //庄家(庄家chairid)
  uint64 master_uid = 7;                   //房主(房主uid)
  S2CHaveOperation can_oper = 8;           //玩家能做的操作
  int32 last_out_chair = 9;                //上次出牌玩家
  int32 cur_out_chair = 10;                //当前出牌玩家
  int32 last_out_card = 11;                //上次出的牌
  int32 left_num = 12;                     //剩下的牌数
  repeated cyint32 unable_out_cards = 13;  //当前不能出的牌
  int32 cur_dice_chair = 14;               //当前摇色子玩家
  repeated cyint32 last_dice_value = 15;   //上一个玩家打色子结果
  repeated cyint32 draw_dice_value = 16;   //摸牌色子
  int32 left_oper_time = 17;               //剩余操作时间
  int32 total_num = 18;                    //总牌数
  string listen_result = 19;  //听牌信息(按照Json_Listen解析)
}

// message PlayerBalanceResult {
//   int32 uid = 1;        //玩家uid
//   int32 point = 2;      //得分
//   int32 hu_pai = 3;     //胡牌次数
//   int32 dian_pao = 4;   //点炮次数
//   int32 an_gang = 5;    //暗杠次数
//   int32 ming_gang = 6;  //明杠次数
// }

// //大局结算
// message BS2CBalanceResult {
//   string room_name = 1;                            //房间名称
//   repeated PlayerBalanceResult player_result = 2;  //大结算结果
// }

// message CardInfo {
//   int32 chair_id = 1;  //玩家chair_id
//   int32 out_cards = 2;  //玩家出過的牌(不包括被碰，杠，吃掉的牌)
//   //玩家碰的牌 json {"12":1,"13":1}->碰了2萬 3萬
//   string peng_cards = 3;
//   //玩家杠的牌 json {"16":2}-> 杠了6萬（1:明杠(碰牌后再杠)，2:暗杠，3:接杠)
//   string gang_cards = 4;
//   //玩家吃的牌[11,12,13;22,23,24],3个连续的组成吃
//   repeated cyint32 chi_cards = 5;
//   repeated cyint32 hand_cards = 6;  //玩家的手牌
//   repeated cyint32 riverCards = 7;  //玩家操作记录
//   int32 card_num = 8;               //玩家当前手上的牌数
//   int32 point = 9;                  //玩家当前分数
// }
// //重连获取牌局信息
// message S2CReconnectGame {
//   repeated CardInfo player_card = 1;  //玩家的牌
//   //玩家可執行的操作 json  [{"canPeng":true}] [{"canGang":[42]}]
//   string can_operation = 2;
//   int32 cur_out_chair = 3;   //當前該出牌的玩家
//   int32 last_out_chair = 4;  //上次出牌的玩家
//   int32 last_out_card = 5;   //上次出的牌
//   int32 banker = 6;          //庄家
//   int32 left_num = 7;        //剩下的牌數
//   int32 game_index = 8;      //當前局數
//   repeated int32 unable_out=9;	//玩家当局不能出的牌列表
// }