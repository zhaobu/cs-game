syntax = "proto3";

package pbgame_mj_changshu;

///////////////////////////房间参数///////////////////////////
message cyUint32 {
  uint32 T = 1;
}

message RoundInfo {
  uint32 LoopCnt = 1;  // 局数 8 16
  uint32 Fee = 2;      // 个人费用 1 2
}

// 创建房间参数
message CreateArg {
  repeated cyUint32 Rule = 1;  // 0:二摸三冲,1:豹子翻倍
  uint32 Barhead = 2;          // 4:扳4个 8:扳8个 1:独龙杠
  int32 PlayerCount = 3;       //玩家人数
  uint32 Dipiao = 4;           //底飘(0~10)
  RoundInfo RInfo = 5;         //局数
  uint32 PaymentType = 6;      //支付方式 1 房主支付 2 平局支付
  uint32 LimitIP = 7;          // ip以及位置限制
  uint32 Voice = 8;            //语音房
}

// 创建房间参数模板
message CreateArgTpl {
  // 玩法  二摸三冲 豹子翻倍
  repeated cyUint32 Rule = 1;
  // 杠头  板4个 板8个 独龙杠
  repeated cyUint32 Barhead = 2;
  // 人数
  repeated cyint32 PlayerCount = 3;
  // 底飘 0~10
  repeated cyUint32 Dipiao = 4;
  // 局数
  repeated RoundInfo RInfo = 5;
  // 支付方式 1 房主支付 2 平局支付
  repeated cyUint32 PaymentType = 6;
  // IP以及位置限制 1 都不选 2 IP以及位置限制 3 IP以及位置限制+强制定位
  uint32 LimitIP = 7;
  // 语音 1 普通场 2 语音场
  uint32 Voice = 8;
  // 默认参数
  CreateArg Def = 9;
}

// 桌子参数
message DeskArg {
  // 创建房间参数
  repeated cyUint32 Rule = 1;
  uint32 Barhead = 2;
  uint32 PlayerCount = 3;
  uint32 Dipiao = 4;
  RoundInfo RInfo = 5;
  uint32 PaymentType = 6;
  uint32 LimitIP = 7;
  uint32 Voice = 8;

  bool Enable = 9;
  // 1 匹配 2 好友 3 比赛
  uint32 Type = 10;
  // 服务费类型 1 金币 2 钻石
  uint32 FeeType = 11;
  uint64 DeskID = 12;
  uint32 RoomId = 13;    // 匹配场时才有用
  string RoomName = 14;  // 匹配场时才有用
}

message cyint32 {
  int32 T = 1;
}

///////////////////////////c-s///////////////////////////
// 投色子
message C2SThrowDice {
}

// 出牌
message C2SOutCard {
  int32 card = 1;
}

//碰牌
message C2SPengCard {
  int32 card = 1;
}

//杠牌
message C2SGangCard {
  int32 card = 1;
}

//吃牌
message C2SChiCard {
  int32 card = 1;       //上家打出的牌
  uint32 chi_type = 2;  //吃牌类型
}

//胡牌
message C2SHuCard {
}

//取消操作
message C2SCancelAction {
}

//重连获取牌局信息
message C2SReconnectGame {
}

///////////////////////////s-c///////////////////////////
//通知玩家投色子
message S2CThrowDice {
  int32 chair_id = 1;  //当前投色子玩家
}

//玩家投色子结果
message S2CThrowDiceResult {
  int32 chair_id = 1;               //当前投色子玩家
  repeated cyint32 dice_value = 2;  //色子大小
}

message ChangePosInfo {
  int32 user_pos = 1;    //玩家方位(1:东2:南3:西4:北)
  int32 dice_value = 2;  //骰子值
}

//换位结果
message S2CChangePos {
  repeated ChangePosInfo pos_info = 1;  //换位结果
}

message StartGameInfo {
  //玩家手牌
  repeated int32 hand_cards = 1;
}

//游戏开始
message S2CStartGame {
  int32 banker_id = 1;          //庄家id(也表示第一个可操作玩家)
  int32 total_card_num = 2;     //总牌数
  int32 left_card_num = 3;      //剩余牌数
  uint32 cur_inning = 4;        //当前局
  StartGameInfo user_info = 5;  //玩家个人信息
}

// //发牌
// message S2CDealCard {
//   int32 card_first = 1;        //第一个出牌的玩家id
//   repeated cyint32 cards = 2;  //玩家手牌数组
// }

//玩家摸牌
message S2CDrawCard {
  int32 chair_id = 1;  //摸牌玩家
  int32 card = 2;      //摸到的牌
  int32 left_num = 3;  //剩余张数
}

message BuHuaOnce {
  int32 hua_card = 1;  //花牌值
  int32 bu_card = 2;  //补到的牌(补花玩家收到真实牌值,其他玩家收到0)
}
//补花
message S2CBuHua {
  int32 chair_id = 1;                    //补花玩家
  repeated BuHuaOnce bu_hua_result = 2;  //补花结果
}

//玩家出牌
message S2COutCard {
  int32 chair_id = 1;  //出牌玩家
  int32 card = 2;      //出的牌
}

enum CanOperMask {
  OperMaskNone = 0;
  OperMaskChi = 1;   //吃标记
  OperMaskPeng = 2;  //碰标记
  OperMaskGang = 4;  //杠标记
  OperMaskHu = 8;    //胡标记
}

enum ChiTypeMask {
  ChiMaskNone = 0;
  ChiMaskLeft = 1;    //左吃(11,12,13,其中11为被吃的牌)
  ChiMaskMiddle = 2;  //中吃(11,12,13,其中12为被吃的牌)
  ChiMaskRight = 4;   //右吃(11,12,13,其中13为被吃的牌)
}

//吃
message CanChiMsg {
  uint32 chi_type = 1;  //能吃的类型
}

//杠
message CanGangMsg {
  repeated int32 cards = 1;  //能杠的牌
}

//胡
// message CanHuMsg {
// }

//玩家该轮的操作
message S2CHaveOperation {
  uint32 oper_mask = 1;     //操作的掩码
  int32 card = 2;           //操作的牌
  CanChiMsg can_chi = 3;    //吃信息
  CanGangMsg can_gang = 4;  //杠信息
}

//玩家碰牌
message S2CPengCard {
  int32 chair_id = 1;  //碰牌玩家
  int32 card = 2;      //要碰的牌
}

enum GangType {
  GangType_None = 0;
  GangType_Bu = 1;    //补杠
  GangType_AN = 2;    //暗杠
  GangType_Ming = 3;  //明杠
}
//玩家杠牌
message S2CGangCard {
  int32 chair_id = 1;  //杠牌玩家
  int32 card = 2;      //要杠的牌
  GangType type = 3;
  int32 lose_chair =
      4;  //放杠的玩家,暗杠为-1,补杠时为碰牌时被碰玩家,明杠时为出牌玩家
}

//玩家吃牌
message S2CChiCard {
  int32 chair_id = 1;   //吃牌玩家
  int32 card = 2;       //要吃的牌:22
  uint32 chi_type = 3;  //吃类型掩码
}

//玩家胡牌
message S2CHuCard {
  int32 chair_id = 1;             //胡牌玩家chair_id
  repeated int32 hand_cards = 2;  //胡牌手牌
}

//倒计时显示在谁头上
message S2CTimeoutChair {
  int32 chair_id = 1;  //倒计时玩家
  int32 time = 2;      //倒计时时间
}

message PlayerBalanceInfo {
  string hu_type = 1;  // json G_HuScore_Type类型参数
  // json {anGang:1,jieGang:1,fangGang:1,mingGang:1},暗杠数,接杠数,放杠数,明杠数
  string gang_type = 2;
  int32 hu_card = 3;                //显示胡的牌
  repeated int32 hand_cards = 4;  //手牌
  int32 point = 5;                  //当局获得分数
  int32 total_point = 6;            //玩家当前总分数
  bool is_hu = 7;                   //是否胡牌
}
//单局游戏结束
message S2CGameEnd {
  uint32 curInning = 1;                           //当前局数
  int32 banker = 2;                               //庄家id
  repeated PlayerBalanceInfo player_balance = 3;  //玩家当局结算信息
  bool isdeuce = 4;                               //是否平局
}

message PlayerBalanceResult {
  int32 uid = 1;       //玩家uid
  int32 point = 2;     //得分
  int32 huPai = 3;     //胡牌次数
  int32 dianPao = 4;   //点炮次数
  int32 anGang = 5;    //暗杠次数
  int32 mingGang = 6;  //明杠次数
}
//大局结算
message S2CBalanceResult {
  string room_name = 1;                            //房间名称
  repeated PlayerBalanceResult player_result = 2;  //大结算结果
}

message CardInfo {
  int32 chair_id = 1;  //玩家chair_id
  int32 out_cards = 2;  //玩家出過的牌(不包括被碰，杠，吃掉的牌)
  //玩家碰的牌 json {"12":1,"13":1}->碰了2萬 3萬
  string peng_cards = 3;
  //玩家杠的牌 json {"16":2}-> 杠了6萬（1:明杠(碰牌后再杠)，2:暗杠，3:接杠)
  string gang_cards = 4;
  //玩家吃的牌[11,12,13;22,23,24],3个连续的组成吃
  repeated cyint32 chi_cards = 5;
  repeated cyint32 hand_cards = 6;  //玩家的手牌
  int32 card_num = 7;               //玩家当前手上的牌数
  int32 point = 8;                  //玩家当前分数
}
//重连获取牌局信息
message S2CReconnectGame {
  CardInfo player_card = 1;  //玩家的牌
  //玩家可執行的操作 json  [{"canPeng":true}] [{"canGang":[42]}]
  string can_operation = 2;
  int32 cur_out_chair = 3;   //當前該出牌的玩家
  int32 last_out_chair = 4;  //上次出牌的玩家
  int32 last_out_card = 5;   //上次出的牌
  int32 banker = 6;          //庄家
  int32 left_num = 7;        //剩下的牌數
  int32 game_index = 8;      //當前局數
}