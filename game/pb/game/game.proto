syntax = "proto3";

import "cy/game/pb/common/head.proto";
import "cy/game/pb/common/common.proto";

package pbgame;

//玩家在桌子中状态
enum UserDeskStatus {
  UDSNone = 0;
  UDSLook = 1;     //观察者
  UDSSitDown = 2;  //已坐下准备中
  UDSPlaying = 3;  //游戏中
}

//扣费类型
enum FeeType {
  FTNone = 0;
  FTGold = 1;     //金币
  FTMasonry = 2;  //钻石
}

// 查询游戏配置 c -> s
message QueryGameConfigReq {
  pbcommon.ReqHead Head = 1;
  string GameName = 2;
  // 1匹配 2好友 3比赛
  pbcommon.DeskType Type = 3;
}

message QueryGameConfigRsp {
  pbcommon.RspHead Head = 1;
  string CfgName = 2;  // 具体游戏配置 如 pbgame_ddz.MatchConfig or
                       // pbgame_ddz.FriendsConfigTpl
  bytes CfgValue = 3;
}

// 查询桌子信息 c -> s
message QueryDeskInfoReq {
  pbcommon.ReqHead Head = 1;
  uint64 DeskID = 2;
}

message QueryDeskInfoRsp {
  pbcommon.RspHead Head = 1;
  // 1 成功 2 不存在
  uint32 Code = 2;
  pbcommon.DeskInfo Info = 3;
}

// 新建桌子 c -> s
message MakeDeskReq {
  pbcommon.ReqHead Head = 1;
  string GameName = 2;
  string GameArgMsgName = 3;  // 具体游戏参数 如 pbgame_ddz.RoomArg
  bytes GameArgMsgValue = 4;
  int64 ClubID = 5;
}

//创建桌子code
enum MakeDeskRspCode {
  MakeDeskNotUse = 0;
  MakeDeskSucc = 1;
  MakeDeskArgsErr = 2;
  MakeDeskNotEnoughMoney = 3;       // 财富不够
  MakeDeskNotEnoughDesk = 4;        // 桌子不够
  MakeDeskInternalServerError = 5;  //服务器内部错误
  MakeDeskUserStatusErr = 6;        // 创建并进入游戏失败
  MakeDeskCanNotFindClubID = 7;     // 无效的俱乐部ID
  MakeDeskLimit = 8;                // 个数限制
  MakeDeskAlreadyInDesk = 9;        //已经在桌子中
}
message MakeDeskRsp {
  pbcommon.RspHead Head = 1;
  MakeDeskRspCode Code = 2;
  string StrCode = 3;
  pbcommon.DeskInfo Info = 4;
}

// 加入桌子 c -> s
message JoinDeskReq {
  pbcommon.ReqHead Head = 1;
  uint64 DeskID = 2;
}

//加入桌子code
enum JoinDeskRspCode {
  JoinDeskNotUse = 0;
  JoinDeskSucc = 1;
  JoinDeskNotExist = 2;
  JoinDeskDeskFull = 3;             //如果观察者有上限,报错
  JoinDeskInternalServerError = 4;  //服务器内部错误
  JoinDeskUserStatusErr = 5;        // redis缓存出错
  JoinDeskAlreadyInDesk = 6;        //已经在桌子中
}
// 加入桌子 s -> c
message JoinDeskRsp {
  pbcommon.RspHead Head = 1;
  JoinDeskRspCode Code = 2;
  string ErrMsg = 3;
  pbcommon.DeskInfo Info = 4;
}

// 坐下准备 c -> s
message SitDownReq {
  pbcommon.ReqHead Head = 1;
  int32 chair_id = 2;  //座位号
}

//坐下准备code
enum SitDownRspCode {
  SitDownNone = 0;
  SitDownSucc = 1;             //坐下成功
  SitDownNotInDesk = 2;        //不在桌子中
  SitDownNotEmpty = 3;         //座位有人
  SitDownDistanceSoClose = 4;  //距离限制不允许坐下
  SitDownGameStatusErr = 5;    //桌子状态错误(比如重复准备)
  SitDownNotEnoughMoney = 6;   //金钱不够
}
// 坐下准备 s -> c
message SitDownRsp {
  pbcommon.RspHead Head = 1;
  SitDownRspCode Code = 2;
  string ErrMsg = 3;
}

// 离开桌子 c -> s
message ExitDeskReq {
  pbcommon.ReqHead Head = 1;
}

//离开桌子code
enum ExitDeskRspCode {
  ExitDeskNone = 0;
  ExitDeskSucc = 1;                 //离开成功
  ExitDeskNotInDesk = 2;            //不在桌子中
  ExitDeskPlaying = 3;              //正在游戏中
  ExitDeskInternalServerError = 4;  //服务器内部错误
}
message ExitDeskRsp {
  pbcommon.RspHead Head = 1;
  ExitDeskRspCode Code = 2;
  string ErrMsg = 3;
}

//点击解散按钮方式
enum DestroyDeskType {
  DestroyTypeGame = 0;   //在桌子发起解散
  DestroyTypeClub = 1;   //在俱乐部发起解散
  DestroyTypeDebug = 2;  //强制解散,调试用
}
// 申请解散 c -> s (包括游戏开始前房主解散和游戏中投票解散)
message DestroyDeskReq {
  pbcommon.ReqHead Head = 1;
  uint64 DeskID = 2;
  DestroyDeskType Type = 3;
}

//申请解散回应code
enum DestroyDeskRspCode {
  DestroyDeskNone = 0;
  DestroyDeskSucc = 1;       //申请解散成功
  DestroyDeskPlaying = 2;    //正在游戏中,不能解散(非好友场次)
  DestroyDeskNotMaster = 3;  //游戏开始前只有房主才能解散房间
  DestroyDeskFrequent = 4;   //解散请求过于频繁
  DestroyDeskNotExist = 5;   //桌子不存在
  DestroyDeskNotInDesk = 6;  //玩家不在桌子中
  DestroyDeskRepeated = 7;   //已经有人申请解散
}
//申请解散回应
message DestroyDeskRsp {
  pbcommon.RspHead Head = 1;
  DestroyDeskRspCode Code = 2;
  string ErrMsg = 3;
}

//房间解散结果通知
message DestroyDeskResultNotif {
  uint64 DeskID = 1;  //桌子号
  int32 Result = 2;   // 1:解散成功 2:解散失败
  string Reason = 3;  //解散原因
}

//投票解散开始
// message VoteDestroyDeskStartNotif {
//   uint64 DeskID = 1;    //桌子号
//   uint64 VoteUser = 2;  //发起解散玩家
//   int32 LeftTime = 3;   //申请解散倒计时时间
// }

enum VoteOption {
  VoteOptionNone = 0;    //未选择
  VoteOptionAgree = 1;   //同意
  VoteOptionReject = 2;  //拒绝
}
// c -> s 玩家选择解散请求
message VoteDestroyDeskReq {
  pbcommon.ReqHead Head = 1;
  VoteOption Option = 3;
}

//投票解散信息
message VoteDestroyDeskInfo {
  uint64 UserID = 1;
  VoteOption Option = 2;
}

// 玩家选择解散请求广播
message VoteDestroyDeskNotif {
  uint64 DeskID = 1;                            //桌子号
  uint64 VoteUser = 2;                          //发起解散玩家
  int32 LeftTime = 3;                           //申请解散倒计时时间
  repeated VoteDestroyDeskInfo VoteResult = 4;  //解散结果
}

// 游戏动作 c -> s
message GameAction {
  pbcommon.ReqHead Head = 1;
  string ActionName = 2;  // 具体游戏子命令
  bytes ActionValue = 3;
}

// 服务器主动通知 s -> c
message GameNotif {
  string NotifName = 1;  // 具体游戏子命令
  bytes NotifValue = 2;
}

//发送聊天信息 c -> s
message ChatMessageReq {
  pbcommon.ReqHead Head = 1;
  string Info = 2;
}

//广播聊天信息 s-> c
message ChatMessageNotif {
  uint64 UserID = 1;
  string Info = 2;
}

//发送游戏指令 c -> s
message GameCommandReq {
  pbcommon.ReqHead Head = 1;
  int32 CmdType = 2;   //指令类型
  string CmdInfo = 3;  //指令内容(按json格式前后端协定好格式)
}