syntax = "proto3";
package impb;

// c -> s
message LoginReq {
}

// s -> c
message LoginRsp {
}

enum ContentType {
    Text  = 0;
    Pic   = 1;
    Sound = 2;
    Video = 3;
}

// c -> s
message SendMsgReq {
    uint64 Seq     = 1;
	uint64 To      = 2; // 类型通过MsgPayload.Flag描述
	uint64 From    = 3;
	bytes Content  = 4;
    ContentType Ct = 5;
}

// s -> c
message SendMsgRsp {
    uint64 Seq    = 1;
    uint32 Code   = 2; // 总是返回1标示成功
    string MsgID  = 3;
}

// s -> c
message MsgNotify {
    string MsgID   = 1;
	uint64 To      = 2; 
	uint64 From    = 3;
	bytes Content  = 4;
    int64 SendTime = 5;
    ContentType Ct = 6;
}

// c -> s
message MsgNotifyAck {
    repeated string MsgIDs = 1;
    uint64 OtherUID = 2;
}

// c -> s
message MsgRecordReq {
    uint64 Seq        = 1;
    uint64 To         = 2; // 这个字段暂时没用
	uint64 From       = 3; 
    string StartMsgID = 4;
    string EndMsgID   = 5;
    int32 limit       = 6;    
}

// s -> c
message MsgRecordRsp {
    uint64 Seq              = 1;
    repeated MsgNotify Msgs = 2;
}

// c -> s 
message QueryUnreadCntReq {
    uint64 Seq = 1;
    uint64 UID = 2;
}

// s -> c
message QueryUnreadCntRsp {
    uint64 Seq = 1;
    map<uint64, int64> Cnt = 2;
}

// c -> s 
message QueryUnreadNReq {
    uint64 Seq  = 1;
    uint64 UID  = 2;
    int64 LastN = 3;
    uint64 OtherUID = 4;
}

// s -> c
message QueryUnreadNRsp {
    uint64 Seq  = 1;
    repeated MsgNotify Msgs = 2;
}

// c -> s
message EnterExitRoom{
    uint64 UID         = 1;
    uint64 RoomID      = 2;
    int32  EnterOrExit = 3; // 1:enter 2:exit
}
