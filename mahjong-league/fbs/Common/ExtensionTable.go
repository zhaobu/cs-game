// automatically generated by the FlatBuffers compiler, do not modify

package Common

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type ExtensionTable struct {
	_tab flatbuffers.Table
}

func GetRootAsExtensionTable(buf []byte, offset flatbuffers.UOffsetT) *ExtensionTable {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &ExtensionTable{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *ExtensionTable) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *ExtensionTable) ExtensionInt() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ExtensionTable) MutateExtensionInt(n int32) bool {
	return rcv._tab.MutateInt32Slot(4, n)
}

func (rcv *ExtensionTable) ExtensionUint() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ExtensionTable) MutateExtensionUint(n uint32) bool {
	return rcv._tab.MutateUint32Slot(6, n)
}

func (rcv *ExtensionTable) ExtensionInt64() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ExtensionTable) MutateExtensionInt64(n int64) bool {
	return rcv._tab.MutateInt64Slot(8, n)
}

func (rcv *ExtensionTable) ExtensionUInt64() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ExtensionTable) MutateExtensionUInt64(n uint64) bool {
	return rcv._tab.MutateUint64Slot(10, n)
}

func (rcv *ExtensionTable) ExtensionIntString() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *ExtensionTable) ExtensionInts(j int) int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetInt32(a + flatbuffers.UOffsetT(j*4))
	}
	return 0
}

func (rcv *ExtensionTable) ExtensionIntsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *ExtensionTable) ExtensionUints(j int) uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetUint32(a + flatbuffers.UOffsetT(j*4))
	}
	return 0
}

func (rcv *ExtensionTable) ExtensionUintsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *ExtensionTable) ExtensionInt64s(j int) int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetInt64(a + flatbuffers.UOffsetT(j*8))
	}
	return 0
}

func (rcv *ExtensionTable) ExtensionInt64sLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *ExtensionTable) ExtensionUInt64s(j int) uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetUint64(a + flatbuffers.UOffsetT(j*8))
	}
	return 0
}

func (rcv *ExtensionTable) ExtensionUInt64sLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *ExtensionTable) ExtensionStrings(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *ExtensionTable) ExtensionStringsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func ExtensionTableStart(builder *flatbuffers.Builder) {
	builder.StartObject(10)
}
func ExtensionTableAddExtensionInt(builder *flatbuffers.Builder, extensionInt int32) {
	builder.PrependInt32Slot(0, extensionInt, 0)
}
func ExtensionTableAddExtensionUint(builder *flatbuffers.Builder, extensionUint uint32) {
	builder.PrependUint32Slot(1, extensionUint, 0)
}
func ExtensionTableAddExtensionInt64(builder *flatbuffers.Builder, extensionInt64 int64) {
	builder.PrependInt64Slot(2, extensionInt64, 0)
}
func ExtensionTableAddExtensionUInt64(builder *flatbuffers.Builder, extensionUInt64 uint64) {
	builder.PrependUint64Slot(3, extensionUInt64, 0)
}
func ExtensionTableAddExtensionIntString(builder *flatbuffers.Builder, extensionIntString flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(extensionIntString), 0)
}
func ExtensionTableAddExtensionInts(builder *flatbuffers.Builder, extensionInts flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(extensionInts), 0)
}
func ExtensionTableStartExtensionIntsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func ExtensionTableAddExtensionUints(builder *flatbuffers.Builder, extensionUints flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(extensionUints), 0)
}
func ExtensionTableStartExtensionUintsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func ExtensionTableAddExtensionInt64s(builder *flatbuffers.Builder, extensionInt64s flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(7, flatbuffers.UOffsetT(extensionInt64s), 0)
}
func ExtensionTableStartExtensionInt64sVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(8, numElems, 8)
}
func ExtensionTableAddExtensionUInt64s(builder *flatbuffers.Builder, extensionUInt64s flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(8, flatbuffers.UOffsetT(extensionUInt64s), 0)
}
func ExtensionTableStartExtensionUInt64sVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(8, numElems, 8)
}
func ExtensionTableAddExtensionStrings(builder *flatbuffers.Builder, extensionStrings flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(9, flatbuffers.UOffsetT(extensionStrings), 0)
}
func ExtensionTableStartExtensionStringsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func ExtensionTableEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
