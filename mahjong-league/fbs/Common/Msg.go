// automatically generated by the FlatBuffers compiler, do not modify

package Common

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type Msg struct {
	_tab flatbuffers.Table
}

func GetRootAsMsg(buf []byte, offset flatbuffers.UOffsetT) *Msg {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Msg{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *Msg) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Msg) MId() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Msg) MutateMId(n uint64) bool {
	return rcv._tab.MutateUint64Slot(4, n)
}

func (rcv *Msg) MType() byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetByte(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Msg) MutateMType(n byte) bool {
	return rcv._tab.MutateByteSlot(6, n)
}

func (rcv *Msg) Content() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Msg) Sender(obj *MsgSender) *MsgSender {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(MsgSender)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *Msg) T() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Msg) MutateT(n int64) bool {
	return rcv._tab.MutateInt64Slot(12, n)
}

func MsgStart(builder *flatbuffers.Builder) {
	builder.StartObject(5)
}
func MsgAddMId(builder *flatbuffers.Builder, mId uint64) {
	builder.PrependUint64Slot(0, mId, 0)
}
func MsgAddMType(builder *flatbuffers.Builder, mType byte) {
	builder.PrependByteSlot(1, mType, 0)
}
func MsgAddContent(builder *flatbuffers.Builder, content flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(content), 0)
}
func MsgAddSender(builder *flatbuffers.Builder, sender flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(sender), 0)
}
func MsgAddT(builder *flatbuffers.Builder, t int64) {
	builder.PrependInt64Slot(4, t, 0)
}
func MsgEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
