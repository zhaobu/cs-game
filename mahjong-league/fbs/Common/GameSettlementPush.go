// automatically generated by the FlatBuffers compiler, do not modify

package Common

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type GameSettlementPush struct {
	_tab flatbuffers.Table
}

func GetRootAsGameSettlementPush(buf []byte, offset flatbuffers.UOffsetT) *GameSettlementPush {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &GameSettlementPush{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *GameSettlementPush) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *GameSettlementPush) IsHuangPai() int8 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt8(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *GameSettlementPush) MutateIsHuangPai(n int8) bool {
	return rcv._tab.MutateInt8Slot(4, n)
}

func (rcv *GameSettlementPush) SettlementInfo(obj *SettlementInfo, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		if obj == nil {
			obj = new(SettlementInfo)
		}
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *GameSettlementPush) SettlementInfoLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *GameSettlementPush) ChikenInfo(obj *SettlementChikens, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		if obj == nil {
			obj = new(SettlementChikens)
		}
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *GameSettlementPush) ChikenInfoLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *GameSettlementPush) IsGoldBam1() int8 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetInt8(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *GameSettlementPush) MutateIsGoldBam1(n int8) bool {
	return rcv._tab.MutateInt8Slot(10, n)
}

func (rcv *GameSettlementPush) SettlementInfoV230(obj *SettlementInfo_v_2_3_0, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		if obj == nil {
			obj = new(SettlementInfo_v_2_3_0)
		}
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *GameSettlementPush) SettlementInfoV230Length() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func GameSettlementPushStart(builder *flatbuffers.Builder) {
	builder.StartObject(5)
}
func GameSettlementPushAddIsHuangPai(builder *flatbuffers.Builder, isHuangPai int8) {
	builder.PrependInt8Slot(0, isHuangPai, 0)
}
func GameSettlementPushAddSettlementInfo(builder *flatbuffers.Builder, settlementInfo flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(settlementInfo), 0)
}
func GameSettlementPushStartSettlementInfoVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func GameSettlementPushAddChikenInfo(builder *flatbuffers.Builder, chikenInfo flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(chikenInfo), 0)
}
func GameSettlementPushStartChikenInfoVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func GameSettlementPushAddIsGoldBam1(builder *flatbuffers.Builder, isGoldBam1 int8) {
	builder.PrependInt8Slot(3, isGoldBam1, 0)
}
func GameSettlementPushAddSettlementInfoV230(builder *flatbuffers.Builder, settlementInfoV230 flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(settlementInfoV230), 0)
}
func GameSettlementPushStartSettlementInfoV230Vector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func GameSettlementPushEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
