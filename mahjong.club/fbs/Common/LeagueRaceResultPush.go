// automatically generated by the FlatBuffers compiler, do not modify

package Common

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type LeagueRaceResultPush struct {
	_tab flatbuffers.Table
}

func GetRootAsLeagueRaceResultPush(buf []byte, offset flatbuffers.UOffsetT) *LeagueRaceResultPush {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &LeagueRaceResultPush{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *LeagueRaceResultPush) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *LeagueRaceResultPush) RaceInfo(obj *Race) *Race {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(Race)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *LeagueRaceResultPush) UserId() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *LeagueRaceResultPush) MutateUserId(n uint32) bool {
	return rcv._tab.MutateUint32Slot(6, n)
}

func (rcv *LeagueRaceResultPush) Rank() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *LeagueRaceResultPush) MutateRank(n int32) bool {
	return rcv._tab.MutateInt32Slot(8, n)
}

func (rcv *LeagueRaceResultPush) RewardsDesc() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func LeagueRaceResultPushStart(builder *flatbuffers.Builder) {
	builder.StartObject(4)
}
func LeagueRaceResultPushAddRaceInfo(builder *flatbuffers.Builder, raceInfo flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(raceInfo), 0)
}
func LeagueRaceResultPushAddUserId(builder *flatbuffers.Builder, userId uint32) {
	builder.PrependUint32Slot(1, userId, 0)
}
func LeagueRaceResultPushAddRank(builder *flatbuffers.Builder, rank int32) {
	builder.PrependInt32Slot(2, rank, 0)
}
func LeagueRaceResultPushAddRewardsDesc(builder *flatbuffers.Builder, rewardsDesc flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(rewardsDesc), 0)
}
func LeagueRaceResultPushEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
