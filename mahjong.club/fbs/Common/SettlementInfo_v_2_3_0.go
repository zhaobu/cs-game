// automatically generated by the FlatBuffers compiler, do not modify

package Common

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type SettlementInfo_v_2_3_0 struct {
	_tab flatbuffers.Table
}

func GetRootAsSettlementInfo_v_2_3_0(buf []byte, offset flatbuffers.UOffsetT) *SettlementInfo_v_2_3_0 {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &SettlementInfo_v_2_3_0{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *SettlementInfo_v_2_3_0) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *SettlementInfo_v_2_3_0) UserId() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *SettlementInfo_v_2_3_0) MutateUserId(n uint32) bool {
	return rcv._tab.MutateUint32Slot(4, n)
}

func (rcv *SettlementInfo_v_2_3_0) WinWay() byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetByte(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *SettlementInfo_v_2_3_0) MutateWinWay(n byte) bool {
	return rcv._tab.MutateByteSlot(6, n)
}

func (rcv *SettlementInfo_v_2_3_0) WinStatus() byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetByte(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *SettlementInfo_v_2_3_0) MutateWinStatus(n byte) bool {
	return rcv._tab.MutateByteSlot(8, n)
}

func (rcv *SettlementInfo_v_2_3_0) BaoTing() byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetByte(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *SettlementInfo_v_2_3_0) MutateBaoTing(n byte) bool {
	return rcv._tab.MutateByteSlot(10, n)
}

func (rcv *SettlementInfo_v_2_3_0) TotalScore() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *SettlementInfo_v_2_3_0) MutateTotalScore(n int32) bool {
	return rcv._tab.MutateInt32Slot(12, n)
}

func (rcv *SettlementInfo_v_2_3_0) GameScore() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *SettlementInfo_v_2_3_0) MutateGameScore(n int32) bool {
	return rcv._tab.MutateInt32Slot(14, n)
}

func (rcv *SettlementInfo_v_2_3_0) ScoreItems(obj *ScoreItem_v_2_3_0, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		if obj == nil {
			obj = new(ScoreItem_v_2_3_0)
		}
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *SettlementInfo_v_2_3_0) ScoreItemsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *SettlementInfo_v_2_3_0) TingStatus() byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.GetByte(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *SettlementInfo_v_2_3_0) MutateTingStatus(n byte) bool {
	return rcv._tab.MutateByteSlot(18, n)
}

func (rcv *SettlementInfo_v_2_3_0) HuStatus() byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.GetByte(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *SettlementInfo_v_2_3_0) MutateHuStatus(n byte) bool {
	return rcv._tab.MutateByteSlot(20, n)
}

func (rcv *SettlementInfo_v_2_3_0) PaoStatus() byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.GetByte(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *SettlementInfo_v_2_3_0) MutatePaoStatus(n byte) bool {
	return rcv._tab.MutateByteSlot(22, n)
}

func SettlementInfo_v_2_3_0Start(builder *flatbuffers.Builder) {
	builder.StartObject(10)
}
func SettlementInfo_v_2_3_0AddUserId(builder *flatbuffers.Builder, userId uint32) {
	builder.PrependUint32Slot(0, userId, 0)
}
func SettlementInfo_v_2_3_0AddWinWay(builder *flatbuffers.Builder, winWay byte) {
	builder.PrependByteSlot(1, winWay, 0)
}
func SettlementInfo_v_2_3_0AddWinStatus(builder *flatbuffers.Builder, winStatus byte) {
	builder.PrependByteSlot(2, winStatus, 0)
}
func SettlementInfo_v_2_3_0AddBaoTing(builder *flatbuffers.Builder, baoTing byte) {
	builder.PrependByteSlot(3, baoTing, 0)
}
func SettlementInfo_v_2_3_0AddTotalScore(builder *flatbuffers.Builder, totalScore int32) {
	builder.PrependInt32Slot(4, totalScore, 0)
}
func SettlementInfo_v_2_3_0AddGameScore(builder *flatbuffers.Builder, gameScore int32) {
	builder.PrependInt32Slot(5, gameScore, 0)
}
func SettlementInfo_v_2_3_0AddScoreItems(builder *flatbuffers.Builder, scoreItems flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(scoreItems), 0)
}
func SettlementInfo_v_2_3_0StartScoreItemsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func SettlementInfo_v_2_3_0AddTingStatus(builder *flatbuffers.Builder, tingStatus byte) {
	builder.PrependByteSlot(7, tingStatus, 0)
}
func SettlementInfo_v_2_3_0AddHuStatus(builder *flatbuffers.Builder, huStatus byte) {
	builder.PrependByteSlot(8, huStatus, 0)
}
func SettlementInfo_v_2_3_0AddPaoStatus(builder *flatbuffers.Builder, paoStatus byte) {
	builder.PrependByteSlot(9, paoStatus, 0)
}
func SettlementInfo_v_2_3_0End(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
