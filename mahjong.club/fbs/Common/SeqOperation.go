// automatically generated by the FlatBuffers compiler, do not modify

package Common

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type SeqOperation struct {
	_tab flatbuffers.Table
}

func GetRootAsSeqOperation(buf []byte, offset flatbuffers.UOffsetT) *SeqOperation {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &SeqOperation{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *SeqOperation) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *SeqOperation) Step() uint16 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetUint16(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *SeqOperation) MutateStep(n uint16) bool {
	return rcv._tab.MutateUint16Slot(4, n)
}

func (rcv *SeqOperation) OperationPush(obj *OperationPush) *OperationPush {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(OperationPush)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *SeqOperation) UserOperationPush(obj *UserOperationPush) *UserOperationPush {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(UserOperationPush)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *SeqOperation) ClientOperationPush(obj *ClientOperationPush) *ClientOperationPush {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(ClientOperationPush)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func SeqOperationStart(builder *flatbuffers.Builder) {
	builder.StartObject(4)
}
func SeqOperationAddStep(builder *flatbuffers.Builder, step uint16) {
	builder.PrependUint16Slot(0, step, 0)
}
func SeqOperationAddOperationPush(builder *flatbuffers.Builder, operationPush flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(operationPush), 0)
}
func SeqOperationAddUserOperationPush(builder *flatbuffers.Builder, userOperationPush flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(userOperationPush), 0)
}
func SeqOperationAddClientOperationPush(builder *flatbuffers.Builder, clientOperationPush flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(clientOperationPush), 0)
}
func SeqOperationEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
