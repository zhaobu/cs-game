// automatically generated by the FlatBuffers compiler, do not modify

package Common

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type GamePlaybackIntactOperation struct {
	_tab flatbuffers.Table
}

func GetRootAsGamePlaybackIntactOperation(buf []byte, offset flatbuffers.UOffsetT) *GamePlaybackIntactOperation {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &GamePlaybackIntactOperation{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *GamePlaybackIntactOperation) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *GamePlaybackIntactOperation) T() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *GamePlaybackIntactOperation) MutateT(n int64) bool {
	return rcv._tab.MutateInt64Slot(4, n)
}

func (rcv *GamePlaybackIntactOperation) UserOperationPush(obj *UserOperationPush) *UserOperationPush {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(UserOperationPush)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *GamePlaybackIntactOperation) ClientOperationPush(obj *ClientOperationPush) *ClientOperationPush {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(ClientOperationPush)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *GamePlaybackIntactOperation) OperationPush(obj *OperationPush) *OperationPush {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(OperationPush)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *GamePlaybackIntactOperation) UserId() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *GamePlaybackIntactOperation) MutateUserId(n uint32) bool {
	return rcv._tab.MutateUint32Slot(12, n)
}

func GamePlaybackIntactOperationStart(builder *flatbuffers.Builder) {
	builder.StartObject(5)
}
func GamePlaybackIntactOperationAddT(builder *flatbuffers.Builder, t int64) {
	builder.PrependInt64Slot(0, t, 0)
}
func GamePlaybackIntactOperationAddUserOperationPush(builder *flatbuffers.Builder, userOperationPush flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(userOperationPush), 0)
}
func GamePlaybackIntactOperationAddClientOperationPush(builder *flatbuffers.Builder, clientOperationPush flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(clientOperationPush), 0)
}
func GamePlaybackIntactOperationAddOperationPush(builder *flatbuffers.Builder, operationPush flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(operationPush), 0)
}
func GamePlaybackIntactOperationAddUserId(builder *flatbuffers.Builder, userId uint32) {
	builder.PrependUint32Slot(4, userId, 0)
}
func GamePlaybackIntactOperationEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
