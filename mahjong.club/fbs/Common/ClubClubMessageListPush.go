// automatically generated by the FlatBuffers compiler, do not modify

package Common

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type ClubClubMessageListPush struct {
	_tab flatbuffers.Table
}

func GetRootAsClubClubMessageListPush(buf []byte, offset flatbuffers.UOffsetT) *ClubClubMessageListPush {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &ClubClubMessageListPush{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *ClubClubMessageListPush) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *ClubClubMessageListPush) ClubId() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ClubClubMessageListPush) MutateClubId(n int32) bool {
	return rcv._tab.MutateInt32Slot(4, n)
}

func (rcv *ClubClubMessageListPush) MsgList(obj *Msg, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		if obj == nil {
			obj = new(Msg)
		}
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *ClubClubMessageListPush) MsgListLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func ClubClubMessageListPushStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func ClubClubMessageListPushAddClubId(builder *flatbuffers.Builder, clubId int32) {
	builder.PrependInt32Slot(0, clubId, 0)
}
func ClubClubMessageListPushAddMsgList(builder *flatbuffers.Builder, msgList flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(msgList), 0)
}
func ClubClubMessageListPushStartMsgListVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func ClubClubMessageListPushEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
