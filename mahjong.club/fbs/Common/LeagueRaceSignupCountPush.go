// automatically generated by the FlatBuffers compiler, do not modify

package Common

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type LeagueRaceSignupCountPush struct {
	_tab flatbuffers.Table
}

func GetRootAsLeagueRaceSignupCountPush(buf []byte, offset flatbuffers.UOffsetT) *LeagueRaceSignupCountPush {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &LeagueRaceSignupCountPush{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *LeagueRaceSignupCountPush) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *LeagueRaceSignupCountPush) RaceId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *LeagueRaceSignupCountPush) MutateRaceId(n int64) bool {
	return rcv._tab.MutateInt64Slot(4, n)
}

func (rcv *LeagueRaceSignupCountPush) LeagueId() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *LeagueRaceSignupCountPush) MutateLeagueId(n int32) bool {
	return rcv._tab.MutateInt32Slot(6, n)
}

func (rcv *LeagueRaceSignupCountPush) Count() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *LeagueRaceSignupCountPush) MutateCount(n int32) bool {
	return rcv._tab.MutateInt32Slot(8, n)
}

func LeagueRaceSignupCountPushStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func LeagueRaceSignupCountPushAddRaceId(builder *flatbuffers.Builder, raceId int64) {
	builder.PrependInt64Slot(0, raceId, 0)
}
func LeagueRaceSignupCountPushAddLeagueId(builder *flatbuffers.Builder, leagueId int32) {
	builder.PrependInt32Slot(1, leagueId, 0)
}
func LeagueRaceSignupCountPushAddCount(builder *flatbuffers.Builder, count int32) {
	builder.PrependInt32Slot(2, count, 0)
}
func LeagueRaceSignupCountPushEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
