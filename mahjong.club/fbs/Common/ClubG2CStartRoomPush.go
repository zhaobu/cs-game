// automatically generated by the FlatBuffers compiler, do not modify

package Common

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type ClubG2CStartRoomPush struct {
	_tab flatbuffers.Table
}

func GetRootAsClubG2CStartRoomPush(buf []byte, offset flatbuffers.UOffsetT) *ClubG2CStartRoomPush {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &ClubG2CStartRoomPush{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *ClubG2CStartRoomPush) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *ClubG2CStartRoomPush) ClubId() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ClubG2CStartRoomPush) MutateClubId(n int32) bool {
	return rcv._tab.MutateInt32Slot(4, n)
}

func (rcv *ClubG2CStartRoomPush) RoomId() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ClubG2CStartRoomPush) MutateRoomId(n uint64) bool {
	return rcv._tab.MutateUint64Slot(6, n)
}

func (rcv *ClubG2CStartRoomPush) Round() byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetByte(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ClubG2CStartRoomPush) MutateRound(n byte) bool {
	return rcv._tab.MutateByteSlot(8, n)
}

func ClubG2CStartRoomPushStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func ClubG2CStartRoomPushAddClubId(builder *flatbuffers.Builder, clubId int32) {
	builder.PrependInt32Slot(0, clubId, 0)
}
func ClubG2CStartRoomPushAddRoomId(builder *flatbuffers.Builder, roomId uint64) {
	builder.PrependUint64Slot(1, roomId, 0)
}
func ClubG2CStartRoomPushAddRound(builder *flatbuffers.Builder, round byte) {
	builder.PrependByteSlot(2, round, 0)
}
func ClubG2CStartRoomPushEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
