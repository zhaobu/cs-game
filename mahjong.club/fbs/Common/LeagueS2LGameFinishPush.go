// automatically generated by the FlatBuffers compiler, do not modify

package Common

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type LeagueS2LGameFinishPush struct {
	_tab flatbuffers.Table
}

func GetRootAsLeagueS2LGameFinishPush(buf []byte, offset flatbuffers.UOffsetT) *LeagueS2LGameFinishPush {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &LeagueS2LGameFinishPush{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *LeagueS2LGameFinishPush) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *LeagueS2LGameFinishPush) RaceRoomId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *LeagueS2LGameFinishPush) MutateRaceRoomId(n int64) bool {
	return rcv._tab.MutateInt64Slot(4, n)
}

func (rcv *LeagueS2LGameFinishPush) RaceId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *LeagueS2LGameFinishPush) MutateRaceId(n int64) bool {
	return rcv._tab.MutateInt64Slot(6, n)
}

func (rcv *LeagueS2LGameFinishPush) Code() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *LeagueS2LGameFinishPush) MutateCode(n int32) bool {
	return rcv._tab.MutateInt32Slot(8, n)
}

func LeagueS2LGameFinishPushStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func LeagueS2LGameFinishPushAddRaceRoomId(builder *flatbuffers.Builder, raceRoomId int64) {
	builder.PrependInt64Slot(0, raceRoomId, 0)
}
func LeagueS2LGameFinishPushAddRaceId(builder *flatbuffers.Builder, raceId int64) {
	builder.PrependInt64Slot(1, raceId, 0)
}
func LeagueS2LGameFinishPushAddCode(builder *flatbuffers.Builder, code int32) {
	builder.PrependInt32Slot(2, code, 0)
}
func LeagueS2LGameFinishPushEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
